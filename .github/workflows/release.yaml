on:
  release:
    types: [created]

jobs:
  releases:
    name: Release Authorizer Binary
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Install dependencies
        run: |
          sudo apt-get install build-essential wget zip gcc-mingw-w64 && \
          sudo apt-get remove --auto-remove golang-go && \
          sudo rm -rf /usr/bin/go &&\
          wget --progress=dot:mega https://golang.org/dl/go1.17.1.linux-amd64.tar.gz -O go-linux.tar.gz && \
          sudo tar -zxf go-linux.tar.gz && \
          sudo mv go /usr/bin/ && \
          sudo mkdir -p /go/bin /go/src /go/pkg && \
          export GO_HOME=/usr/bin/go && \
          export GOPATH=/go && \
          export PATH=${GOPATH}/bin:${GO_HOME}/bin/:$PATH && \
          echo "/usr/bin/go/bin" >> $GITHUB_PATH
          echo "/usr/bin/x86_64-w64-mingw32-gcc" >> GITHUB_PATH
          go version && \
          wget --no-check-certificate --progress=dot:mega https://github.com/wangyoucao577/assets-uploader/releases/download/v0.3.0/github-assets-uploader-v0.3.0-linux-amd64.tar.gz -O github-assets-uploader.tar.gz && \
          tar -zxf github-assets-uploader.tar.gz && \
          sudo mv github-assets-uploader /usr/sbin/ && \
          sudo rm -f github-assets-uploader.tar.gz && \
          github-assets-uploader -version
      - name: Print Go paths
        run: whereis go
      - name: Print Go Version
        run: go version
      - name: Set VERSION env
        run: echo VERSION=$(basename ${GITHUB_REF}) >> ${GITHUB_ENV}
      - name: Copy .env file
        run: mv .env.sample .env
      - name: Package files for windows
        run: |
          make clean && \
          CGO_ENABLED=1 GOOS=windows CC=/usr/bin/x86_64-w64-mingw32-gcc make && \
          mv build/server build/server.exe && \
          zip -vr authorizer-${VERSION}-windows-amd64.zip .env app/build build templates
      - name: Package files for linux
        run: |
          make clean && \
          CGO_ENABLED=1 make && \
          tar cvfz authorizer-${VERSION}-linux-amd64.tar.gz .env app/build build templates
      - name: Upload assets
        run: |
          github-assets-uploader -f authorizer-${VERSION}-windows-amd64.zip -mediatype application/zip -repo authorizerdev/authorizer -token ${{secrets.RELEASE_TOKEN}} -tag ${VERSION} && \
          github-assets-uploader -f authorizer-${VERSION}-linux-amd64.tar.gz -mediatype application/gzip -repo authorizerdev/authorizer -token ${{secrets.RELEASE_TOKEN}} -tag ${VERSION}
      - name: Log in to Docker Hub
        uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
        with:
          images: lakhansamani/authorizer

      - name: Build and push Docker image
        uses: docker/build-push-action@ad44023a93711e3deb337508980b4b5e9bcdc5dc
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
