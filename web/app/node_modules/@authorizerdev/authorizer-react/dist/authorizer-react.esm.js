import React, { useReducer, useRef, useEffect, useContext, createContext, useState } from 'react';
import { Authorizer } from '@authorizerdev/authorizer-js';
import isEmail from 'validator/es/lib/isEmail';
import isMobilePhone from 'validator/es/lib/isMobilePhone';

function _regeneratorRuntime() {
  _regeneratorRuntime = function () {
    return e;
  };
  var t,
    e = {},
    r = Object.prototype,
    n = r.hasOwnProperty,
    o = Object.defineProperty || function (t, e, r) {
      t[e] = r.value;
    },
    i = "function" == typeof Symbol ? Symbol : {},
    a = i.iterator || "@@iterator",
    c = i.asyncIterator || "@@asyncIterator",
    u = i.toStringTag || "@@toStringTag";
  function define(t, e, r) {
    return Object.defineProperty(t, e, {
      value: r,
      enumerable: !0,
      configurable: !0,
      writable: !0
    }), t[e];
  }
  try {
    define({}, "");
  } catch (t) {
    define = function (t, e, r) {
      return t[e] = r;
    };
  }
  function wrap(t, e, r, n) {
    var i = e && e.prototype instanceof Generator ? e : Generator,
      a = Object.create(i.prototype),
      c = new Context(n || []);
    return o(a, "_invoke", {
      value: makeInvokeMethod(t, r, c)
    }), a;
  }
  function tryCatch(t, e, r) {
    try {
      return {
        type: "normal",
        arg: t.call(e, r)
      };
    } catch (t) {
      return {
        type: "throw",
        arg: t
      };
    }
  }
  e.wrap = wrap;
  var h = "suspendedStart",
    l = "suspendedYield",
    f = "executing",
    s = "completed",
    y = {};
  function Generator() {}
  function GeneratorFunction() {}
  function GeneratorFunctionPrototype() {}
  var p = {};
  define(p, a, function () {
    return this;
  });
  var d = Object.getPrototypeOf,
    v = d && d(d(values([])));
  v && v !== r && n.call(v, a) && (p = v);
  var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p);
  function defineIteratorMethods(t) {
    ["next", "throw", "return"].forEach(function (e) {
      define(t, e, function (t) {
        return this._invoke(e, t);
      });
    });
  }
  function AsyncIterator(t, e) {
    function invoke(r, o, i, a) {
      var c = tryCatch(t[r], t, o);
      if ("throw" !== c.type) {
        var u = c.arg,
          h = u.value;
        return h && "object" == typeof h && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) {
          invoke("next", t, i, a);
        }, function (t) {
          invoke("throw", t, i, a);
        }) : e.resolve(h).then(function (t) {
          u.value = t, i(u);
        }, function (t) {
          return invoke("throw", t, i, a);
        });
      }
      a(c.arg);
    }
    var r;
    o(this, "_invoke", {
      value: function (t, n) {
        function callInvokeWithMethodAndArg() {
          return new e(function (e, r) {
            invoke(t, n, e, r);
          });
        }
        return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
      }
    });
  }
  function makeInvokeMethod(e, r, n) {
    var o = h;
    return function (i, a) {
      if (o === f) throw Error("Generator is already running");
      if (o === s) {
        if ("throw" === i) throw a;
        return {
          value: t,
          done: !0
        };
      }
      for (n.method = i, n.arg = a;;) {
        var c = n.delegate;
        if (c) {
          var u = maybeInvokeDelegate(c, n);
          if (u) {
            if (u === y) continue;
            return u;
          }
        }
        if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) {
          if (o === h) throw o = s, n.arg;
          n.dispatchException(n.arg);
        } else "return" === n.method && n.abrupt("return", n.arg);
        o = f;
        var p = tryCatch(e, r, n);
        if ("normal" === p.type) {
          if (o = n.done ? s : l, p.arg === y) continue;
          return {
            value: p.arg,
            done: n.done
          };
        }
        "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg);
      }
    };
  }
  function maybeInvokeDelegate(e, r) {
    var n = r.method,
      o = e.iterator[n];
    if (o === t) return r.delegate = null, "throw" === n && e.iterator.return && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a '" + n + "' method")), y;
    var i = tryCatch(o, e.iterator, r.arg);
    if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y;
    var a = i.arg;
    return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y);
  }
  function pushTryEntry(t) {
    var e = {
      tryLoc: t[0]
    };
    1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e);
  }
  function resetTryEntry(t) {
    var e = t.completion || {};
    e.type = "normal", delete e.arg, t.completion = e;
  }
  function Context(t) {
    this.tryEntries = [{
      tryLoc: "root"
    }], t.forEach(pushTryEntry, this), this.reset(!0);
  }
  function values(e) {
    if (e || "" === e) {
      var r = e[a];
      if (r) return r.call(e);
      if ("function" == typeof e.next) return e;
      if (!isNaN(e.length)) {
        var o = -1,
          i = function next() {
            for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next;
            return next.value = t, next.done = !0, next;
          };
        return i.next = i;
      }
    }
    throw new TypeError(typeof e + " is not iterable");
  }
  return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", {
    value: GeneratorFunctionPrototype,
    configurable: !0
  }), o(GeneratorFunctionPrototype, "constructor", {
    value: GeneratorFunction,
    configurable: !0
  }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) {
    var e = "function" == typeof t && t.constructor;
    return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name));
  }, e.mark = function (t) {
    return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t;
  }, e.awrap = function (t) {
    return {
      __await: t
    };
  }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () {
    return this;
  }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) {
    void 0 === i && (i = Promise);
    var a = new AsyncIterator(wrap(t, r, n, o), i);
    return e.isGeneratorFunction(r) ? a : a.next().then(function (t) {
      return t.done ? t.value : a.next();
    });
  }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () {
    return this;
  }), define(g, "toString", function () {
    return "[object Generator]";
  }), e.keys = function (t) {
    var e = Object(t),
      r = [];
    for (var n in e) r.push(n);
    return r.reverse(), function next() {
      for (; r.length;) {
        var t = r.pop();
        if (t in e) return next.value = t, next.done = !1, next;
      }
      return next.done = !0, next;
    };
  }, e.values = values, Context.prototype = {
    constructor: Context,
    reset: function (e) {
      if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t);
    },
    stop: function () {
      this.done = !0;
      var t = this.tryEntries[0].completion;
      if ("throw" === t.type) throw t.arg;
      return this.rval;
    },
    dispatchException: function (e) {
      if (this.done) throw e;
      var r = this;
      function handle(n, o) {
        return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o;
      }
      for (var o = this.tryEntries.length - 1; o >= 0; --o) {
        var i = this.tryEntries[o],
          a = i.completion;
        if ("root" === i.tryLoc) return handle("end");
        if (i.tryLoc <= this.prev) {
          var c = n.call(i, "catchLoc"),
            u = n.call(i, "finallyLoc");
          if (c && u) {
            if (this.prev < i.catchLoc) return handle(i.catchLoc, !0);
            if (this.prev < i.finallyLoc) return handle(i.finallyLoc);
          } else if (c) {
            if (this.prev < i.catchLoc) return handle(i.catchLoc, !0);
          } else {
            if (!u) throw Error("try statement without catch or finally");
            if (this.prev < i.finallyLoc) return handle(i.finallyLoc);
          }
        }
      }
    },
    abrupt: function (t, e) {
      for (var r = this.tryEntries.length - 1; r >= 0; --r) {
        var o = this.tryEntries[r];
        if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) {
          var i = o;
          break;
        }
      }
      i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null);
      var a = i ? i.completion : {};
      return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a);
    },
    complete: function (t, e) {
      if ("throw" === t.type) throw t.arg;
      return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y;
    },
    finish: function (t) {
      for (var e = this.tryEntries.length - 1; e >= 0; --e) {
        var r = this.tryEntries[e];
        if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y;
      }
    },
    catch: function (t) {
      for (var e = this.tryEntries.length - 1; e >= 0; --e) {
        var r = this.tryEntries[e];
        if (r.tryLoc === t) {
          var n = r.completion;
          if ("throw" === n.type) {
            var o = n.arg;
            resetTryEntry(r);
          }
          return o;
        }
      }
      throw Error("illegal catch attempt");
    },
    delegateYield: function (e, r, n) {
      return this.delegate = {
        iterator: values(e),
        resultName: r,
        nextLoc: n
      }, "next" === this.method && (this.arg = t), y;
    }
  }, e;
}
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
  try {
    var info = gen[key](arg);
    var value = info.value;
  } catch (error) {
    reject(error);
    return;
  }
  if (info.done) {
    resolve(value);
  } else {
    Promise.resolve(value).then(_next, _throw);
  }
}
function _asyncToGenerator(fn) {
  return function () {
    var self = this,
      args = arguments;
    return new Promise(function (resolve, reject) {
      var gen = fn.apply(self, args);
      function _next(value) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
      }
      function _throw(err) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
      }
      _next(undefined);
    });
  };
}
function _extends() {
  _extends = Object.assign ? Object.assign.bind() : function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends.apply(this, arguments);
}

var Views;
(function (Views) {
  Views[Views["Login"] = 0] = "Login";
  Views[Views["Signup"] = 1] = "Signup";
  Views[Views["ForgotPassword"] = 2] = "ForgotPassword";
})(Views || (Views = {}));
var ButtonAppearance;
(function (ButtonAppearance) {
  ButtonAppearance[ButtonAppearance["Primary"] = 0] = "Primary";
  ButtonAppearance[ButtonAppearance["Default"] = 1] = "Default";
})(ButtonAppearance || (ButtonAppearance = {}));
var MessageType;
(function (MessageType) {
  MessageType[MessageType["Error"] = 0] = "Error";
  MessageType[MessageType["Success"] = 1] = "Success";
  MessageType[MessageType["Info"] = 2] = "Info";
})(MessageType || (MessageType = {}));
var AuthorizerProviderActionType;
(function (AuthorizerProviderActionType) {
  AuthorizerProviderActionType["SET_USER"] = "SET_USER";
  AuthorizerProviderActionType["SET_TOKEN"] = "SET_TOKEN";
  AuthorizerProviderActionType["SET_LOADING"] = "SET_LOADING";
  AuthorizerProviderActionType["SET_AUTH_DATA"] = "SET_AUTH_DATA";
  AuthorizerProviderActionType["SET_CONFIG"] = "SET_CONFIG";
})(AuthorizerProviderActionType || (AuthorizerProviderActionType = {}));
// TODO use based on theme primary color
var passwordStrengthIndicatorOpacity = {
  "default": 0.15,
  weak: 0.4,
  good: 0.6,
  strong: 0.8,
  veryStrong: 1
};

var hasWindow = function hasWindow() {
  return typeof window !== 'undefined';
};

var AuthorizerContext = /*#__PURE__*/createContext({
  config: {
    authorizerURL: '',
    redirectURL: '/',
    client_id: '',
    is_google_login_enabled: false,
    is_github_login_enabled: false,
    is_facebook_login_enabled: false,
    is_linkedin_login_enabled: false,
    is_apple_login_enabled: false,
    is_twitter_login_enabled: false,
    is_microsoft_login_enabled: false,
    is_twitch_login_enabled: false,
    is_roblox_login_enabled: false,
    is_email_verification_enabled: false,
    is_basic_authentication_enabled: false,
    is_magic_link_login_enabled: false,
    is_sign_up_enabled: false,
    is_strong_password_enabled: true,
    is_multi_factor_auth_enabled: false,
    is_mobile_basic_authentication_enabled: false,
    is_phone_verification_enabled: false
  },
  user: null,
  token: null,
  loading: false,
  setLoading: function setLoading() {},
  setToken: function setToken() {},
  setUser: function setUser() {},
  setAuthData: function setAuthData() {},
  authorizerRef: /*#__PURE__*/new Authorizer({
    authorizerURL: "http://localhost:8080",
    redirectURL: /*#__PURE__*/hasWindow() ? window.location.origin : '/',
    clientID: ''
  }),
  logout: ( /*#__PURE__*/function () {
    var _logout = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
      return _regeneratorRuntime().wrap(function _callee$(_context) {
        while (1) switch (_context.prev = _context.next) {
          case 0:
          case "end":
            return _context.stop();
        }
      }, _callee);
    }));
    function logout() {
      return _logout.apply(this, arguments);
    }
    return logout;
  }())
});
function reducer(state, action) {
  switch (action.type) {
    case AuthorizerProviderActionType.SET_USER:
      return _extends({}, state, {
        user: action.payload.user
      });
    case AuthorizerProviderActionType.SET_TOKEN:
      return _extends({}, state, {
        token: action.payload.token
      });
    case AuthorizerProviderActionType.SET_LOADING:
      return _extends({}, state, {
        loading: action.payload.loading
      });
    case AuthorizerProviderActionType.SET_CONFIG:
      return _extends({}, state, {
        config: action.payload.config
      });
    case AuthorizerProviderActionType.SET_AUTH_DATA:
      return _extends({}, action.payload);
    default:
      throw new Error();
  }
}
var initialState = {
  user: null,
  token: null,
  loading: true,
  config: {
    authorizerURL: '',
    redirectURL: '/',
    client_id: '',
    is_google_login_enabled: false,
    is_github_login_enabled: false,
    is_facebook_login_enabled: false,
    is_linkedin_login_enabled: false,
    is_apple_login_enabled: false,
    is_twitter_login_enabled: false,
    is_microsoft_login_enabled: false,
    is_twitch_login_enabled: false,
    is_roblox_login_enabled: false,
    is_email_verification_enabled: false,
    is_basic_authentication_enabled: false,
    is_magic_link_login_enabled: false,
    is_sign_up_enabled: false,
    is_strong_password_enabled: true,
    is_multi_factor_auth_enabled: false,
    is_mobile_basic_authentication_enabled: false,
    is_phone_verification_enabled: false
  }
};
var AuthorizerProvider = function AuthorizerProvider(_ref) {
  var defaultConfig = _ref.config,
    onStateChangeCallback = _ref.onStateChangeCallback,
    children = _ref.children;
  var _useReducer = useReducer(reducer, _extends({}, initialState, {
      config: _extends({}, initialState.config, defaultConfig)
    })),
    state = _useReducer[0],
    dispatch = _useReducer[1];
  var intervalRef = null;
  var authorizerRef = useRef(new Authorizer({
    authorizerURL: state.config.authorizerURL,
    redirectURL: hasWindow() ? state.config.redirectURL || window.location.origin : state.config.redirectURL || '/',
    clientID: state.config.client_id
  }));
  var getToken = /*#__PURE__*/function () {
    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {
      var _yield$authorizerRef$, metaRes, metaResErrors, _yield$authorizerRef$2, res, errors, token;
      return _regeneratorRuntime().wrap(function _callee2$(_context2) {
        while (1) switch (_context2.prev = _context2.next) {
          case 0:
            _context2.next = 2;
            return authorizerRef.current.getMetaData();
          case 2:
            _yield$authorizerRef$ = _context2.sent;
            metaRes = _yield$authorizerRef$.data;
            metaResErrors = _yield$authorizerRef$.errors;
            _context2.prev = 5;
            if (!(metaResErrors && metaResErrors.length)) {
              _context2.next = 8;
              break;
            }
            throw new Error(metaResErrors[0].message);
          case 8:
            _context2.next = 10;
            return authorizerRef.current.getSession();
          case 10:
            _yield$authorizerRef$2 = _context2.sent;
            res = _yield$authorizerRef$2.data;
            errors = _yield$authorizerRef$2.errors;
            if (!(errors && errors.length)) {
              _context2.next = 15;
              break;
            }
            throw new Error(errors[0].message);
          case 15:
            if (res && res.access_token && res.user) {
              token = {
                access_token: res.access_token,
                expires_in: res.expires_in,
                id_token: res.id_token,
                refresh_token: res.refresh_token || ''
              };
              dispatch({
                type: AuthorizerProviderActionType.SET_AUTH_DATA,
                payload: _extends({}, state, {
                  token: token,
                  user: res.user,
                  config: _extends({}, state.config, metaRes),
                  loading: false
                })
              });
              // const millisecond = getIntervalDiff(res.expires_at);
              // if (millisecond > 0) {
              //   if (intervalRef) clearInterval(intervalRef);
              //   intervalRef = setInterval(() => {
              //     getToken();
              //   }, millisecond);
              // }
              if (intervalRef) clearInterval(intervalRef);
              intervalRef = setInterval(function () {
                getToken();
              }, res.expires_in * 1000);
            } else {
              dispatch({
                type: AuthorizerProviderActionType.SET_AUTH_DATA,
                payload: _extends({}, state, {
                  token: null,
                  user: null,
                  config: _extends({}, state.config, metaRes),
                  loading: false
                })
              });
            }
            _context2.next = 21;
            break;
          case 18:
            _context2.prev = 18;
            _context2.t0 = _context2["catch"](5);
            dispatch({
              type: AuthorizerProviderActionType.SET_AUTH_DATA,
              payload: _extends({}, state, {
                token: null,
                user: null,
                config: _extends({}, state.config, metaRes),
                loading: false
              })
            });
          case 21:
          case "end":
            return _context2.stop();
        }
      }, _callee2, null, [[5, 18]]);
    }));
    return function getToken() {
      return _ref2.apply(this, arguments);
    };
  }();
  useEffect(function () {
    getToken();
    return function () {
      if (intervalRef) {
        clearInterval(intervalRef);
      }
    };
  }, []);
  useEffect(function () {
    if (onStateChangeCallback) {
      onStateChangeCallback(state);
    }
  }, [state]);
  var handleTokenChange = function handleTokenChange(token) {
    dispatch({
      type: AuthorizerProviderActionType.SET_TOKEN,
      payload: {
        token: token
      }
    });
    if (token != null && token.access_token) {
      if (intervalRef) clearInterval(intervalRef);
      intervalRef = setInterval(function () {
        getToken();
      }, token.expires_in * 1000);
    }
  };
  var setAuthData = function setAuthData(data) {
    var _data$token;
    dispatch({
      type: AuthorizerProviderActionType.SET_AUTH_DATA,
      payload: data
    });
    if ((_data$token = data.token) != null && _data$token.access_token) {
      if (intervalRef) clearInterval(intervalRef);
      intervalRef = setInterval(function () {
        getToken();
      }, data.token.expires_in * 1000);
    }
  };
  var setUser = function setUser(user) {
    dispatch({
      type: AuthorizerProviderActionType.SET_USER,
      payload: {
        user: user
      }
    });
  };
  var setLoading = function setLoading(loading) {
    dispatch({
      type: AuthorizerProviderActionType.SET_LOADING,
      payload: {
        loading: loading
      }
    });
  };
  var logout = /*#__PURE__*/function () {
    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {
      var loggedOutState;
      return _regeneratorRuntime().wrap(function _callee3$(_context3) {
        while (1) switch (_context3.prev = _context3.next) {
          case 0:
            dispatch({
              type: AuthorizerProviderActionType.SET_LOADING,
              payload: {
                loading: true
              }
            });
            _context3.next = 3;
            return authorizerRef.current.logout();
          case 3:
            loggedOutState = {
              user: null,
              token: null,
              loading: false,
              config: state.config
            };
            dispatch({
              type: AuthorizerProviderActionType.SET_AUTH_DATA,
              payload: loggedOutState
            });
          case 5:
          case "end":
            return _context3.stop();
        }
      }, _callee3);
    }));
    return function logout() {
      return _ref3.apply(this, arguments);
    };
  }();
  return React.createElement(AuthorizerContext.Provider, {
    value: _extends({}, state, {
      setUser: setUser,
      setLoading: setLoading,
      setToken: handleTokenChange,
      setAuthData: setAuthData,
      authorizerRef: authorizerRef.current,
      logout: logout
    })
  }, children);
};
var useAuthorizer = function useAuthorizer() {
  return useContext(AuthorizerContext);
};

function styleInject(css, ref) {
  if ( ref === void 0 ) ref = {};
  var insertAt = ref.insertAt;

  if (!css || typeof document === 'undefined') { return; }

  var head = document.head || document.getElementsByTagName('head')[0];
  var style = document.createElement('style');
  style.type = 'text/css';

  if (insertAt === 'top') {
    if (head.firstChild) {
      head.insertBefore(style, head.firstChild);
    } else {
      head.appendChild(style);
    }
  } else {
    head.appendChild(style);
  }

  if (style.styleSheet) {
    style.styleSheet.cssText = css;
  } else {
    style.appendChild(document.createTextNode(css));
  }
}

var css_248z = ":root {\n  --authorizer-primary-color: #3b82f6;\n  --authorizer-primary-disabled-color: #60a5fa;\n  --authorizer-gray-color: #d1d5db;\n  --authorizer-slate-color: #e2e8f0;\n  --authorizer-white-color: #ffffff;\n  --authorizer-danger-color: #dc2626;\n  --authorizer-success-color: #10b981;\n  --authorizer-text-color: #374151;\n  --authorizer-fonts-font-stack: -apple-system, system-ui, sans-serif;\n  --authorizer-fonts-large-text: 18px;\n  --authorizer-fonts-medium-text: 14px;\n  --authorizer-fonts-small-text: 12px;\n  --authorizer-fonts-tiny-text: 10px;\n  --authorizer-radius-card: 5px;\n  --authorizer-radius-button: 5px;\n  --authorizer-radius-input: 5px;\n}\n.default_styled-button__nC8O8 {\n  padding: 15px 10px !important;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  max-height: 64px;\n  border-radius: var(--authorizer-radius-button);\n  border-color: var(--authorizer-text-color) !important;\n  border-style: solid !important;\n  cursor: pointer;\n  position: relative;\n}\n.default_styled-button__nC8O8:disabled {\n  cursor: not-allowed;\n  background-color: var(--authorizer-primary-disabled-color);\n}\n.default_styled-flex__-Ht-R {\n  display: flex;\n}\n.default_styled-footer__CcCGy {\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  margin-top: 15px;\n}\n.default_styled-form-group__ZR0-U {\n  width: 100%;\n  border: 0px;\n  background-color: var(--authorizer-white-color);\n  padding: 0 0 15px;\n}\n.default_form-input-label__UvinM {\n  padding: 2.5px;\n}\n.default_form-input-label__UvinM > span {\n  color: var(--authorizer-danger-color);\n}\n.default_form-input-field__G8P0W {\n  width: 100%;\n  margin-top: 5px;\n  padding: 10px;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  border-radius: var(--authorizer-radius-input);\n  border: 1px;\n  border-style: solid;\n  border-color: var(--authorizer-text-color);\n}\n.default_input-error-content__Ogcjm {\n  border-color: var(--authorizer-danger-color) !important;\n}\n.default_input-error-content__Ogcjm:hover {\n  outline-color: var(--authorizer-danger-color);\n}\n.default_input-error-content__Ogcjm:focus {\n  outline-color: var(--authorizer-danger-color);\n}\n.default_form-input-error__qq-T7 {\n  font-size: 12px;\n  font-weight: 400;\n  color: red;\n  border-color: var(--authorizer-danger-color);\n}\n.default_styled-link__msGJf {\n  color: var(--authorizer-primary-color);\n  cursor: pointer;\n}\n.default_styled-message-wrapper__hPNs7 {\n  padding: 10px;\n  color: white;\n  border-radius: var(--authorizer-radius-card);\n  margin: 10px 0px;\n  font-size: var(--authorizer-fonts-small-text);\n}\n.default_styled-password-strength__MEGkw {\n  width: 100%;\n  height: 10px;\n  flex: 0.75;\n  border-radius: 5px;\n  margin-right: 5px;\n  background-color: var(--authorizer-primary-color);\n}\n.default_styled-password-strength-wrapper__F0N3N {\n  margin: 2% 0 0;\n}\n.default_styled-separator__6ukq- {\n  display: flex;\n  align-items: center;\n  text-align: center;\n  margin: 10px 0px;\n}\n.default_styled-separator__6ukq-::before {\n  content: '';\n  flex: 1;\n  border-bottom: 1px solid var(--authorizer-gray-color);\n}\n.default_styled-separator__6ukq-::after {\n  content: '';\n  flex: 1;\n  border-bottom: 1px solid var(--authorizer-gray-color);\n}\n.default_styled-separator__6ukq-:not(:empty)::before {\n  margin-right: 0.25em;\n}\n.default_styled-separator__6ukq-:not(:empty)::after {\n  margin-left: 0.25em;\n}\n.default_styled-wrapper__d53e1 {\n  font-family: var(--authorizer-fonts-font-stack);\n  color: var(--authorizer-text-color);\n  font-size: var(--authorizer-fonts-medium-text);\n  box-sizing: border-box;\n  width: 100%;\n  min-width: 300px;\n}\n.default_styled-wrapper__d53e1 *,\n*:before,\n*:after {\n  box-sizing: inherit;\n}\n";
var styles = {"styled-button":"default_styled-button__nC8O8","styled-flex":"default_styled-flex__-Ht-R","styled-footer":"default_styled-footer__CcCGy","styled-form-group":"default_styled-form-group__ZR0-U","form-input-label":"default_form-input-label__UvinM","form-input-field":"default_form-input-field__G8P0W","input-error-content":"default_input-error-content__Ogcjm","form-input-error":"default_form-input-error__qq-T7","styled-link":"default_styled-link__msGJf","styled-message-wrapper":"default_styled-message-wrapper__hPNs7","styled-password-strength":"default_styled-password-strength__MEGkw","styled-password-strength-wrapper":"default_styled-password-strength-wrapper__F0N3N","styled-separator":"default_styled-separator__6ukq-","styled-wrapper":"default_styled-wrapper__d53e1"};
styleInject(css_248z);

var StyledWrapper = function StyledWrapper(_ref) {
  var children = _ref.children;
  return React.createElement("div", {
    className: styles['styled-wrapper']
  }, children);
};

var StyledButton = function StyledButton(_ref) {
  var _ref$style = _ref.style,
    style = _ref$style === void 0 ? {
      width: '100%'
    } : _ref$style,
    type = _ref.type,
    _ref$appearance = _ref.appearance,
    appearance = _ref$appearance === void 0 ? ButtonAppearance.Default : _ref$appearance,
    _ref$disabled = _ref.disabled,
    disabled = _ref$disabled === void 0 ? false : _ref$disabled,
    onClick = _ref.onClick,
    children = _ref.children;
  return React.createElement("button", {
    className: styles['styled-button'],
    type: type,
    style: {
      width: style.width,
      backgroundColor: disabled ? 'var(--authorizer-primary-disabled-color)' : appearance === ButtonAppearance.Primary ? 'var(--authorizer-primary-color)' : 'var(--authorizer-white-color)',
      color: appearance === ButtonAppearance.Default ? 'var(--authorizer-text-color)' : 'var(--authorizer-white-color)',
      border: appearance === ButtonAppearance.Primary ? '0px' : '1px'
    },
    disabled: disabled,
    onClick: onClick
  }, children);
};

var StyledLink = function StyledLink(_ref) {
  var _ref$marginBottom = _ref.marginBottom,
    marginBottom = _ref$marginBottom === void 0 ? '0px' : _ref$marginBottom,
    children = _ref.children,
    onClick = _ref.onClick;
  return React.createElement("span", {
    className: styles['styled-link'],
    style: {
      marginBottom: marginBottom
    },
    onClick: onClick
  }, children);
};

var StyledSeparator = function StyledSeparator(_ref) {
  var children = _ref.children;
  return React.createElement("div", {
    className: styles['styled-separator']
  }, children);
};

var StyledFooter = function StyledFooter(_ref) {
  var children = _ref.children;
  return React.createElement("div", {
    className: styles['styled-footer']
  }, children);
};

var getBackgroundColor = function getBackgroundColor(type) {
  switch (type) {
    case MessageType.Error:
      return 'var(--authorizer-danger-color)';
    case MessageType.Success:
      return 'var(--authorizer-success-color)';
    case MessageType.Info:
      return 'var(--authorizer-slate-color)';
    default:
      return 'var(--authorizer-success-color)';
  }
};
var StyledMessageWrapper = function StyledMessageWrapper(_ref) {
  var _ref$type = _ref.type,
    type = _ref$type === void 0 ? MessageType.Success : _ref$type,
    _ref$styles = _ref.styles,
    extraStyles = _ref$styles === void 0 ? {} : _ref$styles,
    children = _ref.children;
  return React.createElement("div", {
    className: styles['styled-message-wrapper'],
    style: _extends({
      backgroundColor: getBackgroundColor(type)
    }, extraStyles)
  }, children);
};

var StyledFlex = function StyledFlex(_ref) {
  var _ref$flexDirection = _ref.flexDirection,
    flexDirection = _ref$flexDirection === void 0 ? 'row' : _ref$flexDirection,
    _ref$alignItems = _ref.alignItems,
    alignItems = _ref$alignItems === void 0 ? 'center' : _ref$alignItems,
    _ref$justifyContent = _ref.justifyContent,
    justifyContent = _ref$justifyContent === void 0 ? 'center' : _ref$justifyContent,
    _ref$wrap = _ref.wrap,
    wrap = _ref$wrap === void 0 ? 'wrap' : _ref$wrap,
    _ref$width = _ref.width,
    width = _ref$width === void 0 ? 'inherit' : _ref$width,
    children = _ref.children;
  return React.createElement("div", {
    className: styles['styled-flex'],
    style: {
      flexDirection: flexDirection,
      alignItems: alignItems,
      justifyContent: justifyContent,
      flexWrap: wrap,
      width: width
    }
  }, children);
};

var StyledPasswordStrength = function StyledPasswordStrength(_ref) {
  var _ref$strength = _ref.strength,
    strength = _ref$strength === void 0 ? 'default' : _ref$strength,
    children = _ref.children;
  return React.createElement("div", {
    className: styles['styled-password-strength'],
    style: {
      opacity: passwordStrengthIndicatorOpacity[strength]
    }
  }, children);
};

var StyledPasswordStrengthWrapper = function StyledPasswordStrengthWrapper(_ref) {
  var children = _ref.children;
  return React.createElement("div", {
    className: styles['styled-password-strength-wrapper']
  }, children);
};

var formatErrorMessage = function formatErrorMessage(message) {
  return message.replace("[GraphQL] ", '');
};
var capitalizeFirstLetter = function capitalizeFirstLetter(data) {
  return data.charAt(0).toUpperCase() + data.slice(1);
};

var IconClose = function IconClose() {
  return React.createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 1000 1000",
    width: "10px",
    height: "10px"
  }, React.createElement("g", null, React.createElement("path", {
    fill: "#ffffff",
    d: "M617.2,495.8l349.1,350.9c31.7,31.8,31.7,83.5,0,115.3c-31.7,31.9-83.1,31.9-114.8,0L502.4,611.2L149.8,965.6c-32,32.2-83.8,32.2-115.8,0c-32-32.1-32-84.3,0-116.4l352.6-354.5L48.2,154.6c-31.7-31.9-31.7-83.5,0-115.4c31.7-31.9,83.1-31.9,114.7,0l338.4,340.2l343.3-345c32-32.1,83.8-32.1,115.8,0c32,32.2,32,84.3,0,116.4L617.2,495.8z"
  })));
};

var Message = function Message(_ref) {
  var type = _ref.type,
    text = _ref.text,
    extraStyles = _ref.extraStyles,
    onClose = _ref.onClose;
  if (text.trim()) {
    return React.createElement(StyledMessageWrapper, {
      type: type,
      styles: extraStyles
    }, React.createElement(StyledFlex, {
      alignItems: "center",
      justifyContent: "space-between"
    }, React.createElement("div", {
      style: {
        flex: 1
      }
    }, capitalizeFirstLetter(text)), onClose && React.createElement("span", {
      style: {
        cursor: 'pointer'
      },
      onClick: onClose
    }, React.createElement(IconClose, null))));
  }
  return null;
};

var hasSpecialChar = function hasSpecialChar(_char) {
  var re = /[`!@#$%^&*()_+\-=\[\]{};':"\\|,.<>\/?~]/;
  return re.test(_char);
};
var validatePassword = function validatePassword(value) {
  var res = {
    score: 0,
    strength: '',
    hasSixChar: false,
    hasLowerCase: false,
    hasUpperCase: false,
    hasNumericChar: false,
    hasSpecialChar: false,
    maxThirtySixChar: false
  };
  if (value.length >= 6) {
    res.score = res.score + 1;
    res.hasSixChar = true;
  }
  if (value.length > 0 && value.length <= 36) {
    res.score = res.score + 1;
    res.maxThirtySixChar = true;
  }
  Array.from(value).forEach(function (_char2) {
    if (_char2 >= 'A' && _char2 <= 'Z' && !res.hasUpperCase) {
      res.score = res.score + 1;
      res.hasUpperCase = true;
    } else if (_char2 >= 'a' && _char2 <= 'z' && !res.hasLowerCase) {
      res.score = res.score + 1;
      res.hasLowerCase = true;
    } else if (_char2 >= '0' && _char2 <= '9' && !res.hasNumericChar) {
      res.score = res.score + 1;
      res.hasNumericChar = true;
    } else if (hasSpecialChar(_char2) && !res.hasSpecialChar) {
      res.score = res.score + 1;
      res.hasSpecialChar = true;
    }
  });
  if (res.score <= 2) {
    res.strength = 'Weak';
  } else if (res.score <= 4) {
    res.strength = 'Good';
  } else if (res.score <= 5) {
    res.strength = 'Strong';
  } else {
    res.strength = 'Very Strong';
  }
  var isValid = Object.values(res).every(function (i) {
    return Boolean(i);
  });
  return _extends({}, res, {
    isValid: isValid
  });
};

var PasswordStrengthIndicator = function PasswordStrengthIndicator(_ref) {
  var value = _ref.value,
    setDisableButton = _ref.setDisableButton;
  var _React$useState = React.useState(_extends({}, validatePassword(value || ''))),
    _React$useState$ = _React$useState[0],
    strength = _React$useState$.strength,
    score = _React$useState$.score,
    hasSixChar = _React$useState$.hasSixChar,
    hasLowerCase = _React$useState$.hasLowerCase,
    hasNumericChar = _React$useState$.hasNumericChar,
    hasSpecialChar = _React$useState$.hasSpecialChar,
    hasUpperCase = _React$useState$.hasUpperCase,
    maxThirtySixChar = _React$useState$.maxThirtySixChar,
    setValidations = _React$useState[1];
  React.useEffect(function () {
    var validationData = validatePassword(value || '');
    setValidations(_extends({}, validationData));
    if (!validationData.isValid) {
      setDisableButton(true);
    } else {
      setDisableButton(false);
    }
  }, [value]);
  return React.createElement("div", null, React.createElement(StyledPasswordStrengthWrapper, null, React.createElement(StyledFlex, {
    alignItems: "center",
    justifyContent: "center",
    wrap: "nowrap"
  }, React.createElement(StyledPasswordStrength, {
    strength: score > 2 ? "weak" : "default"
  }), React.createElement(StyledPasswordStrength, {
    strength: score > 3 ? "good" : "default"
  }), React.createElement(StyledPasswordStrength, {
    strength: score > 4 ? "strong" : "default"
  }), React.createElement(StyledPasswordStrength, {
    strength: score > 5 ? "veryStrong" : "default"
  }), !!score && React.createElement("div", null, strength))), React.createElement("p", null, React.createElement("b", null, "Criteria for a strong password:")), React.createElement(StyledFlex, {
    flexDirection: "column"
  }, React.createElement(StyledFlex, {
    justifyContent: "flex-start",
    alignItems: "center",
    width: "100%"
  }, React.createElement("input", {
    readOnly: true,
    type: "checkbox",
    checked: hasSixChar
  }), React.createElement("div", {
    style: {
      marginLeft: '5px'
    }
  }, "At least 6 characters")), React.createElement(StyledFlex, {
    justifyContent: "flex-start",
    alignItems: "center",
    width: "100%"
  }, React.createElement("input", {
    readOnly: true,
    type: "checkbox",
    checked: hasLowerCase
  }), React.createElement("div", {
    style: {
      marginLeft: '5px'
    }
  }, "At least 1 lowercase letter")), React.createElement(StyledFlex, {
    justifyContent: "flex-start",
    alignItems: "center",
    width: "100%"
  }, React.createElement("input", {
    readOnly: true,
    type: "checkbox",
    checked: hasUpperCase
  }), React.createElement("div", {
    style: {
      marginLeft: '5px'
    }
  }, "At least 1 uppercase letter")), React.createElement(StyledFlex, {
    justifyContent: "flex-start",
    alignItems: "center",
    width: "100%"
  }, React.createElement("input", {
    readOnly: true,
    type: "checkbox",
    checked: hasNumericChar
  }), React.createElement("div", {
    style: {
      marginLeft: '5px'
    }
  }, "At least 1 numeric character")), React.createElement(StyledFlex, {
    justifyContent: "flex-start",
    alignItems: "center",
    width: "100%"
  }, React.createElement("input", {
    readOnly: true,
    type: "checkbox",
    checked: hasSpecialChar
  }), React.createElement("div", {
    style: {
      marginLeft: '5px'
    }
  }, "At least 1 special character")), React.createElement(StyledFlex, {
    justifyContent: "flex-start",
    alignItems: "center",
    width: "100%"
  }, React.createElement("input", {
    readOnly: true,
    type: "checkbox",
    checked: maxThirtySixChar
  }), React.createElement("div", {
    style: {
      marginLeft: '5px'
    }
  }, "Maximum 36 characters"))));
};

var AuthorizerVerifyOtp = function AuthorizerVerifyOtp(_ref) {
  var setView = _ref.setView,
    onLogin = _ref.onLogin,
    email = _ref.email,
    phone_number = _ref.phone_number,
    urlProps = _ref.urlProps,
    is_totp = _ref.is_totp;
  var _useState = useState(""),
    error = _useState[0],
    setError = _useState[1];
  var _useState2 = useState(""),
    successMessage = _useState2[0],
    setSuccessMessage = _useState2[1];
  var _useState3 = useState(false),
    loading = _useState3[0],
    setLoading = _useState3[1];
  var _useState4 = useState(false),
    sendingOtp = _useState4[0],
    setSendingOtp = _useState4[1];
  var _useState5 = useState({
      otp: null
    }),
    formData = _useState5[0],
    setFormData = _useState5[1];
  var _useState6 = useState({
      otp: null
    }),
    errorData = _useState6[0],
    setErrorData = _useState6[1];
  var _useAuthorizer = useAuthorizer(),
    authorizerRef = _useAuthorizer.authorizerRef,
    config = _useAuthorizer.config,
    setAuthData = _useAuthorizer.setAuthData;
  useEffect(function () {
    if (!email && !phone_number) {
      setError("Email or Phone Number is required");
    }
  }, []);
  var onInputChange = /*#__PURE__*/function () {
    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(field, value) {
      var _extends2;
      return _regeneratorRuntime().wrap(function _callee$(_context) {
        while (1) switch (_context.prev = _context.next) {
          case 0:
            setFormData(_extends({}, formData, (_extends2 = {}, _extends2[field] = value, _extends2)));
          case 1:
          case "end":
            return _context.stop();
        }
      }, _callee);
    }));
    return function onInputChange(_x, _x2) {
      return _ref2.apply(this, arguments);
    };
  }();
  var onSubmit = /*#__PURE__*/function () {
    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(e) {
      var data, _yield$authorizerRef$, res, errors, _errors$;
      return _regeneratorRuntime().wrap(function _callee2$(_context2) {
        while (1) switch (_context2.prev = _context2.next) {
          case 0:
            e.preventDefault();
            setSuccessMessage("");
            _context2.prev = 2;
            setLoading(true);
            data = {
              email: email,
              phone_number: phone_number,
              otp: formData.otp || ''
            };
            if (urlProps != null && urlProps.state) {
              data.state = urlProps.state;
            }
            data.is_totp = !!is_totp;
            _context2.next = 9;
            return authorizerRef.verifyOtp(data);
          case 9:
            _yield$authorizerRef$ = _context2.sent;
            res = _yield$authorizerRef$.data;
            errors = _yield$authorizerRef$.errors;
            setLoading(false);
            if (!(errors && errors.length)) {
              _context2.next = 16;
              break;
            }
            setError(((_errors$ = errors[0]) == null ? void 0 : _errors$.message) || "");
            return _context2.abrupt("return");
          case 16:
            if (res) {
              setError("");
              setAuthData({
                user: res.user || null,
                token: {
                  access_token: res.access_token,
                  expires_in: res.expires_in,
                  refresh_token: res.refresh_token,
                  id_token: res.id_token
                },
                config: config,
                loading: false
              });
            }
            if (onLogin) {
              onLogin(res);
            }
            _context2.next = 24;
            break;
          case 20:
            _context2.prev = 20;
            _context2.t0 = _context2["catch"](2);
            setLoading(false);
            setError(_context2.t0.message);
          case 24:
          case "end":
            return _context2.stop();
        }
      }, _callee2, null, [[2, 20]]);
    }));
    return function onSubmit(_x3) {
      return _ref3.apply(this, arguments);
    };
  }();
  var onErrorClose = function onErrorClose() {
    setError("");
  };
  var onSuccessClose = function onSuccessClose() {
    setSuccessMessage("");
  };
  var resendOtp = /*#__PURE__*/function () {
    var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {
      var _yield$authorizerRef$2, res, errors, _errors$2;
      return _regeneratorRuntime().wrap(function _callee3$(_context3) {
        while (1) switch (_context3.prev = _context3.next) {
          case 0:
            setSuccessMessage("");
            _context3.prev = 1;
            setSendingOtp(true);
            _context3.next = 5;
            return authorizerRef.resendOtp({
              email: email,
              phone_number: phone_number
            });
          case 5:
            _yield$authorizerRef$2 = _context3.sent;
            res = _yield$authorizerRef$2.data;
            errors = _yield$authorizerRef$2.errors;
            setSendingOtp(false);
            if (!(errors && errors.length)) {
              _context3.next = 12;
              break;
            }
            setError(((_errors$2 = errors[0]) == null ? void 0 : _errors$2.message) || "");
            return _context3.abrupt("return");
          case 12:
            if (res && res != null && res.message) {
              setError("");
              setSuccessMessage(res.message);
            }
            if (onLogin) {
              onLogin(res);
            }
            _context3.next = 20;
            break;
          case 16:
            _context3.prev = 16;
            _context3.t0 = _context3["catch"](1);
            setLoading(false);
            setError(_context3.t0.message);
          case 20:
          case "end":
            return _context3.stop();
        }
      }, _callee3, null, [[1, 16]]);
    }));
    return function resendOtp() {
      return _ref4.apply(this, arguments);
    };
  }();
  useEffect(function () {
    if (formData.otp === '') {
      setErrorData(_extends({}, errorData, {
        otp: 'OTP is required'
      }));
    } else {
      setErrorData(_extends({}, errorData, {
        otp: null
      }));
    }
  }, [formData.otp]);
  return React.createElement(React.Fragment, null, successMessage && React.createElement(Message, {
    type: MessageType.Success,
    text: successMessage,
    onClose: onSuccessClose
  }), error && React.createElement(Message, {
    type: MessageType.Error,
    text: error,
    onClose: onErrorClose
  }), React.createElement("p", {
    style: {
      textAlign: 'center',
      margin: '10px 0px'
    }
  }, "Please enter the OTP sent to your email or phone number or authenticator"), React.createElement("br", null), React.createElement("form", {
    onSubmit: onSubmit,
    name: "authorizer-mfa-otp-form"
  }, React.createElement("div", {
    className: styles['styled-form-group']
  }, React.createElement("label", {
    className: styles['form-input-label'],
    htmlFor: "authorizer-verify-otp"
  }, React.createElement("span", null, "* "), "OTP (One Time Password)"), React.createElement("input", {
    name: "otp",
    id: "authorizer-verify-otp",
    className: styles['form-input-field'] + " " + (errorData.otp ? styles['input-error-content'] : null),
    placeholder: "e.g.- AB123C",
    type: "password",
    value: formData.otp || '',
    onChange: function onChange(e) {
      return onInputChange('otp', e.target.value);
    }
  }), errorData.otp && React.createElement("div", {
    className: styles['form-input-error']
  }, errorData.otp), is_totp && React.createElement(Message, {
    type: MessageType.Info,
    text: "If you have lost access to your device, please enter recovery code that were shared while enabling Multifactor Authentication.",
    extraStyles: {
      color: 'var(--authorizer-text-color)'
    }
  })), React.createElement("br", null), React.createElement(StyledButton, {
    type: "submit",
    disabled: loading || !formData.otp || !!errorData.otp,
    appearance: ButtonAppearance.Primary
  }, loading ? "Processing ..." : "Submit")), setView && React.createElement(StyledFooter, null, sendingOtp ? React.createElement("div", {
    style: {
      marginBottom: '10px'
    }
  }, "Sending ...") : React.createElement(StyledLink, {
    onClick: resendOtp,
    marginBottom: "10px"
  }, "Resend OTP"), config.is_sign_up_enabled && React.createElement("div", null, "Don't have an account?", ' ', React.createElement(StyledLink, {
    onClick: function onClick() {
      return setView(Views.Signup);
    }
  }, "Sign Up"))));
};

var getEmailPhoneLabels = function getEmailPhoneLabels(config) {
  var emailLabel = 'Email';
  var phoneLabel = 'Phone Number';
  if (config.is_basic_authentication_enabled && config.is_mobile_basic_authentication_enabled) {
    return emailLabel + " / " + phoneLabel;
  } else if (config.is_basic_authentication_enabled) {
    return emailLabel;
  } else if (config.is_mobile_basic_authentication_enabled) {
    return phoneLabel;
  }
  return emailLabel;
};
var getEmailPhonePlaceholder = function getEmailPhonePlaceholder(config) {
  var emailPlaceholder = 'hello@world.com';
  var phonePlaceholder = '+919999999999';
  var prefix = 'eg.';
  if (config.is_basic_authentication_enabled && config.is_mobile_basic_authentication_enabled) {
    return prefix + " " + emailPlaceholder + " / " + phonePlaceholder;
  } else if (config.is_basic_authentication_enabled) {
    return prefix + " " + emailPlaceholder;
  } else if (config.is_mobile_basic_authentication_enabled) {
    return prefix + " " + phonePlaceholder;
  }
  return emailPlaceholder;
};

var initOtpData = {
  is_screen_visible: false,
  email: '',
  phone_number: ''
};
var AuthorizerSignup = function AuthorizerSignup(_ref) {
  var setView = _ref.setView,
    onSignup = _ref.onSignup,
    urlProps = _ref.urlProps,
    roles = _ref.roles;
  var _useState = useState(""),
    error = _useState[0],
    setError = _useState[1];
  var _useState2 = useState(false),
    loading = _useState2[0],
    setLoading = _useState2[1];
  var _useState3 = useState(_extends({}, initOtpData)),
    otpData = _useState3[0],
    setOtpData = _useState3[1];
  var _useState4 = useState(""),
    successMessage = _useState4[0],
    setSuccessMessage = _useState4[1];
  var _useState5 = useState({
      given_name: null,
      family_name: null,
      email_or_phone_number: null,
      password: null,
      confirmPassword: null
    }),
    formData = _useState5[0],
    setFormData = _useState5[1];
  var _useState6 = useState({
      given_name: null,
      family_name: null,
      email_or_phone_number: null,
      password: null,
      confirmPassword: null
    }),
    errorData = _useState6[0],
    setErrorData = _useState6[1];
  var _useAuthorizer = useAuthorizer(),
    authorizerRef = _useAuthorizer.authorizerRef,
    config = _useAuthorizer.config,
    setAuthData = _useAuthorizer.setAuthData;
  var _useState7 = useState(false),
    disableSignupButton = _useState7[0],
    setDisableSignupButton = _useState7[1];
  var onInputChange = /*#__PURE__*/function () {
    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(field, value) {
      var _extends2;
      return _regeneratorRuntime().wrap(function _callee$(_context) {
        while (1) switch (_context.prev = _context.next) {
          case 0:
            setFormData(_extends({}, formData, (_extends2 = {}, _extends2[field] = value, _extends2)));
          case 1:
          case "end":
            return _context.stop();
        }
      }, _callee);
    }));
    return function onInputChange(_x, _x2) {
      return _ref2.apply(this, arguments);
    };
  }();
  var onSubmit = /*#__PURE__*/function () {
    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(e) {
      var email, phone_number, data, _yield$authorizerRef$, res, errors, _errors$;
      return _regeneratorRuntime().wrap(function _callee2$(_context2) {
        while (1) switch (_context2.prev = _context2.next) {
          case 0:
            e.preventDefault();
            _context2.prev = 1;
            setLoading(true);
            email = '';
            phone_number = '';
            if (formData.email_or_phone_number) {
              if (isEmail(formData.email_or_phone_number)) {
                email = formData.email_or_phone_number;
              } else if (isMobilePhone(formData.email_or_phone_number)) {
                phone_number = formData.email_or_phone_number;
              }
            }
            if (!(!email && !phone_number)) {
              _context2.next = 10;
              break;
            }
            setErrorData(_extends({}, errorData, {
              email_or_phone_number: 'Invalid email or phone number'
            }));
            setLoading(false);
            return _context2.abrupt("return");
          case 10:
            data = {
              email: email,
              phone_number: phone_number,
              given_name: formData.given_name || '',
              family_name: formData.family_name || '',
              password: formData.password || '',
              confirm_password: formData.confirmPassword || ''
            };
            if (urlProps != null && urlProps.scope) {
              data.scope = urlProps.scope;
            }
            if (urlProps != null && urlProps.roles) {
              data.roles = urlProps.roles;
            }
            if (urlProps != null && urlProps.redirect_uri) {
              data.redirect_uri = urlProps.redirect_uri;
            }
            if (urlProps != null && urlProps.state) {
              data.state = urlProps.state;
            }
            if (roles && roles.length) {
              data.roles = roles;
            }
            _context2.next = 18;
            return authorizerRef.signup(data);
          case 18:
            _yield$authorizerRef$ = _context2.sent;
            res = _yield$authorizerRef$.data;
            errors = _yield$authorizerRef$.errors;
            if (!(errors && errors.length)) {
              _context2.next = 25;
              break;
            }
            setError(formatErrorMessage((_errors$ = errors[0]) == null ? void 0 : _errors$.message));
            setLoading(false);
            return _context2.abrupt("return");
          case 25:
            if (!(res && (res != null && res.should_show_email_otp_screen || res != null && res.should_show_mobile_otp_screen))) {
              _context2.next = 28;
              break;
            }
            setOtpData({
              is_screen_visible: true,
              email: data.email || "",
              phone_number: data.phone_number || ""
            });
            return _context2.abrupt("return");
          case 28:
            if (res) {
              setError("");
              if (res.access_token) {
                setError("");
                setAuthData({
                  user: res.user || null,
                  token: {
                    access_token: res.access_token,
                    expires_in: res.expires_in,
                    refresh_token: res.refresh_token,
                    id_token: res.id_token
                  },
                  config: config,
                  loading: false
                });
              } else {
                setLoading(false);
                setSuccessMessage(res.message || "");
              }
              if (onSignup) {
                onSignup(res);
              }
            }
            _context2.next = 35;
            break;
          case 31:
            _context2.prev = 31;
            _context2.t0 = _context2["catch"](1);
            setLoading(false);
            setError(formatErrorMessage(_context2.t0.message));
          case 35:
          case "end":
            return _context2.stop();
        }
      }, _callee2, null, [[1, 31]]);
    }));
    return function onSubmit(_x3) {
      return _ref3.apply(this, arguments);
    };
  }();
  var onErrorClose = function onErrorClose() {
    setError("");
  };
  useEffect(function () {
    if ((formData.given_name || '').trim() === '') {
      setErrorData(_extends({}, errorData, {
        given_name: 'First Name is required'
      }));
    } else {
      setErrorData(_extends({}, errorData, {
        given_name: null
      }));
    }
  }, [formData.given_name]);
  useEffect(function () {
    if ((formData.family_name || '').trim() === '') {
      setErrorData(_extends({}, errorData, {
        family_name: 'Last Name is required'
      }));
    } else {
      setErrorData(_extends({}, errorData, {
        family_name: null
      }));
    }
  }, [formData.family_name]);
  useEffect(function () {
    if (formData.email_or_phone_number === '') {
      setErrorData(_extends({}, errorData, {
        email_or_phone_number: 'Email OR Phone Number is required'
      }));
    } else if (!isEmail(formData.email_or_phone_number || '') && !isMobilePhone(formData.email_or_phone_number || '')) {
      setErrorData(_extends({}, errorData, {
        email_or_phone_number: 'Invalid Email OR Phone Number'
      }));
    } else {
      setErrorData(_extends({}, errorData, {
        email_or_phone_number: null
      }));
    }
  }, [formData.email_or_phone_number]);
  useEffect(function () {
    if (formData.password === '') {
      setErrorData(_extends({}, errorData, {
        password: 'Password is required'
      }));
    } else {
      setErrorData(_extends({}, errorData, {
        password: null
      }));
    }
  }, [formData.password]);
  useEffect(function () {
    if (formData.confirmPassword === '') {
      setErrorData(_extends({}, errorData, {
        confirmPassword: 'Confirm password is required'
      }));
    } else {
      setErrorData(_extends({}, errorData, {
        confirmPassword: null
      }));
    }
  }, [formData.confirmPassword]);
  useEffect(function () {
    if (formData.password && formData.confirmPassword) {
      if (formData.confirmPassword !== formData.password) {
        setErrorData(_extends({}, errorData, {
          password: "Password and confirm passwords don't match",
          confirmPassword: "Password and confirm passwords don't match"
        }));
      } else {
        setErrorData(_extends({}, errorData, {
          password: null,
          confirmPassword: null
        }));
      }
    }
  }, [formData.password, formData.confirmPassword]);
  if (otpData.is_screen_visible) {
    return React.createElement(React.Fragment, null, successMessage && React.createElement(Message, {
      type: MessageType.Success,
      text: successMessage
    }), React.createElement(AuthorizerVerifyOtp, Object.assign({}, {
      setView: setView,
      onLogin: onSignup,
      email: otpData.email || "",
      phone_number: otpData.phone_number || "",
      is_totp: otpData.is_totp || false
    }, {
      urlProps: urlProps
    })));
  }
  return React.createElement(React.Fragment, null, error && React.createElement(Message, {
    type: MessageType.Error,
    text: error,
    onClose: onErrorClose
  }), successMessage && React.createElement(Message, {
    type: MessageType.Success,
    text: successMessage
  }), (config.is_basic_authentication_enabled || config.is_mobile_basic_authentication_enabled) && !config.is_magic_link_login_enabled && React.createElement(React.Fragment, null, React.createElement("form", {
    onSubmit: onSubmit,
    name: "authorizer-sign-up-form"
  }, React.createElement("div", {
    className: styles['styled-form-group']
  }, React.createElement("label", {
    className: styles['form-input-label'],
    htmlFor: "authorizer-sign-up-given-name"
  }, React.createElement("span", null, "* "), "First Name"), React.createElement("input", {
    name: "given_name",
    id: "authorizer-sign-up-given-name",
    className: styles['form-input-field'] + " " + (errorData.given_name ? styles['input-error-content'] : null),
    placeholder: "eg. John",
    type: "text",
    value: formData.given_name || '',
    onChange: function onChange(e) {
      return onInputChange('given_name', e.target.value);
    }
  }), errorData.given_name && React.createElement("div", {
    className: styles['form-input-error']
  }, errorData.given_name)), React.createElement("div", {
    className: styles['styled-form-group']
  }, React.createElement("label", {
    className: styles['form-input-label'],
    htmlFor: "authorizer-sign-up-family-name"
  }, React.createElement("span", null, "* "), "Last Name"), React.createElement("input", {
    name: "family_name",
    id: "authorizer-sign-up-family-name",
    className: styles['form-input-field'] + " " + (errorData.family_name ? styles['input-error-content'] : null),
    placeholder: "eg. Doe",
    type: "text",
    value: formData.family_name || '',
    onChange: function onChange(e) {
      return onInputChange('family_name', e.target.value);
    }
  }), errorData.family_name && React.createElement("div", {
    className: styles['form-input-error']
  }, errorData.family_name)), React.createElement("div", {
    className: styles['styled-form-group']
  }, React.createElement("label", {
    className: styles['form-input-label'],
    htmlFor: "authorizer-sign-up-email-or-phone-number"
  }, React.createElement("span", null, "* "), getEmailPhoneLabels(config)), React.createElement("input", {
    name: "email_or_phone_number",
    id: "authorizer-sign-up-email-or-phone-number",
    className: styles['form-input-field'] + " " + (errorData.email_or_phone_number ? styles['input-error-content'] : null),
    placeholder: getEmailPhonePlaceholder(config),
    type: "text",
    value: formData.email_or_phone_number || '',
    onChange: function onChange(e) {
      return onInputChange('email_or_phone_number', e.target.value);
    }
  }), errorData.email_or_phone_number && React.createElement("div", {
    className: styles['form-input-error']
  }, errorData.email_or_phone_number)), React.createElement("div", {
    className: styles['styled-form-group']
  }, React.createElement("label", {
    className: styles['form-input-label'],
    htmlFor: "authorizer-sign-up-password"
  }, React.createElement("span", null, "* "), "Password"), React.createElement("input", {
    name: "password",
    id: "authorizer-sign-up-password",
    className: styles['form-input-field'] + " " + (errorData.password ? styles['input-error-content'] : null),
    placeholder: "********",
    type: "password",
    value: formData.password || '',
    onChange: function onChange(e) {
      return onInputChange('password', e.target.value);
    }
  }), errorData.password && React.createElement("div", {
    className: styles['form-input-error']
  }, errorData.password)), React.createElement("div", {
    className: styles['styled-form-group']
  }, React.createElement("label", {
    className: styles['form-input-label'],
    htmlFor: "authorizer-sign-up-confirm-password"
  }, React.createElement("span", null, "* "), "Confirm Password"), React.createElement("input", {
    name: "confirmPassword",
    id: "authorizer-sign-up-confirm-password",
    className: styles['form-input-field'] + " " + (errorData.confirmPassword ? styles['input-error-content'] : null),
    placeholder: "********",
    type: "password",
    value: formData.confirmPassword || '',
    onChange: function onChange(e) {
      return onInputChange('confirmPassword', e.target.value);
    }
  }), errorData.confirmPassword && React.createElement("div", {
    className: styles['form-input-error']
  }, errorData.confirmPassword)), config.is_strong_password_enabled && React.createElement(React.Fragment, null, React.createElement(PasswordStrengthIndicator, {
    value: formData.password || '',
    setDisableButton: setDisableSignupButton
  }), React.createElement("br", null)), React.createElement("br", null), React.createElement(StyledButton, {
    type: "submit",
    disabled: loading || disableSignupButton || !!errorData.given_name || !!errorData.family_name || !!errorData.email_or_phone_number || !!errorData.password || !!errorData.confirmPassword || !formData.given_name || !formData.family_name || !formData.email_or_phone_number || !formData.password || !formData.confirmPassword,
    appearance: ButtonAppearance.Primary
  }, loading ? "Processing ..." : "Sign Up")), setView && React.createElement(StyledFooter, null, React.createElement("div", null, "Already have an account?", ' ', React.createElement(StyledLink, {
    onClick: function onClick() {
      return setView(Views.Login);
    }
  }, "Log In")))));
};

var AuthorizerTOTPScanner = function AuthorizerTOTPScanner(_ref) {
  var setView = _ref.setView,
    onLogin = _ref.onLogin,
    email = _ref.email,
    phone_number = _ref.phone_number,
    authenticator_scanner_image = _ref.authenticator_scanner_image,
    authenticator_secret = _ref.authenticator_secret,
    authenticator_recovery_codes = _ref.authenticator_recovery_codes,
    urlProps = _ref.urlProps;
  var _useState = useState(false),
    isOTPScreenVisisble = _useState[0],
    setIsOTPScreenVisisble = _useState[1];
  var handleContinue = function handleContinue() {
    setIsOTPScreenVisisble(true);
  };
  if (isOTPScreenVisisble) {
    return React.createElement(AuthorizerVerifyOtp, Object.assign({}, {
      setView: setView,
      onLogin: onLogin,
      email: email,
      phone_number: phone_number,
      urlProps: urlProps
    }, {
      is_totp: true
    }));
  }
  return React.createElement(React.Fragment, null, React.createElement("p", {
    style: {
      margin: '10px 0px',
      fontWeight: 'bold'
    }
  }, "Scan the QR code or enter the secret key into your authenticator app."), React.createElement(StyledFlex, {
    justifyContent: "center"
  }, React.createElement("img", {
    src: "data:image/jpeg;base64," + authenticator_scanner_image,
    alt: "scanner"
  })), React.createElement("p", {
    style: {
      margin: '10px 0px'
    }
  }, "If you are unable to scan the QR code, please enter the secret key manually."), React.createElement("p", {
    style: {
      margin: '10px 0px',
      fontWeight: 'bold'
    }
  }, authenticator_secret), React.createElement(StyledSeparator, null), React.createElement("p", {
    style: {
      margin: '10px 0px'
    }
  }, "If you lose access to your authenticator app, you can use the recovery codes below to regain access to your account. Please save these codes safely and do not share them with anyone."), React.createElement("ul", null, authenticator_recovery_codes.map(function (code, index) {
    return React.createElement("li", {
      key: index
    }, code);
  })), React.createElement(StyledButton, {
    type: "button",
    appearance: ButtonAppearance.Primary,
    onClick: handleContinue
  }, "Continue"));
};

var initOtpData$1 = {
  is_screen_visible: false,
  email: '',
  phone_number: ''
};
var initTotpData = {
  is_screen_visible: false,
  email: '',
  phone_number: '',
  authenticator_scanner_image: '',
  authenticator_secret: '',
  authenticator_recovery_codes: []
};
var AuthorizerBasicAuthLogin = function AuthorizerBasicAuthLogin(_ref) {
  var setView = _ref.setView,
    onLogin = _ref.onLogin,
    urlProps = _ref.urlProps,
    roles = _ref.roles;
  var _useState = useState(""),
    error = _useState[0],
    setError = _useState[1];
  var _useState2 = useState(false),
    loading = _useState2[0],
    setLoading = _useState2[1];
  var _useState3 = useState(_extends({}, initOtpData$1)),
    otpData = _useState3[0],
    setOtpData = _useState3[1];
  var _useState4 = useState(_extends({}, initTotpData)),
    totpData = _useState4[0],
    setTotpData = _useState4[1];
  var _useState5 = useState({
      email_or_phone_number: null,
      password: null
    }),
    formData = _useState5[0],
    setFormData = _useState5[1];
  var _useState6 = useState({
      email_or_phone_number: null,
      password: null
    }),
    errorData = _useState6[0],
    setErrorData = _useState6[1];
  var _useAuthorizer = useAuthorizer(),
    setAuthData = _useAuthorizer.setAuthData,
    config = _useAuthorizer.config,
    authorizerRef = _useAuthorizer.authorizerRef;
  var onInputChange = /*#__PURE__*/function () {
    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(field, value) {
      var _extends2;
      return _regeneratorRuntime().wrap(function _callee$(_context) {
        while (1) switch (_context.prev = _context.next) {
          case 0:
            setFormData(_extends({}, formData, (_extends2 = {}, _extends2[field] = value, _extends2)));
          case 1:
          case "end":
            return _context.stop();
        }
      }, _callee);
    }));
    return function onInputChange(_x, _x2) {
      return _ref2.apply(this, arguments);
    };
  }();
  var onSubmit = /*#__PURE__*/function () {
    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(e) {
      var email, phone_number, data, _yield$authorizerRef$, res, errors;
      return _regeneratorRuntime().wrap(function _callee2$(_context2) {
        while (1) switch (_context2.prev = _context2.next) {
          case 0:
            e.preventDefault();
            setLoading(true);
            _context2.prev = 2;
            email = '';
            phone_number = '';
            if (formData.email_or_phone_number) {
              if (isEmail(formData.email_or_phone_number)) {
                email = formData.email_or_phone_number;
              } else if (isMobilePhone(formData.email_or_phone_number)) {
                phone_number = formData.email_or_phone_number;
              }
            }
            if (!(!email && !phone_number)) {
              _context2.next = 10;
              break;
            }
            setErrorData(_extends({}, errorData, {
              email_or_phone_number: 'Invalid email or phone number'
            }));
            setLoading(false);
            return _context2.abrupt("return");
          case 10:
            data = {
              email: email,
              phone_number: phone_number,
              password: formData.password || ''
            };
            if (urlProps != null && urlProps.scope) {
              data.scope = urlProps.scope;
            }
            if (urlProps != null && urlProps.state) {
              data.state = urlProps.state;
            }
            if (roles && roles.length) {
              data.roles = roles;
            }
            _context2.next = 16;
            return authorizerRef.login(data);
          case 16:
            _yield$authorizerRef$ = _context2.sent;
            res = _yield$authorizerRef$.data;
            errors = _yield$authorizerRef$.errors;
            if (!(errors && errors.length)) {
              _context2.next = 23;
              break;
            }
            setError(errors[0].message);
            setLoading(false);
            return _context2.abrupt("return");
          case 23:
            if (!(res && res.should_show_totp_screen && res.authenticator_scanner_image && res.authenticator_secret && res.authenticator_recovery_codes)) {
              _context2.next = 26;
              break;
            }
            setTotpData({
              is_screen_visible: true,
              email: data.email || "",
              phone_number: data.phone_number || "",
              authenticator_scanner_image: res.authenticator_scanner_image,
              authenticator_secret: res.authenticator_secret,
              authenticator_recovery_codes: res.authenticator_recovery_codes
            });
            return _context2.abrupt("return");
          case 26:
            if (!(res && (res != null && res.should_show_email_otp_screen || res != null && res.should_show_mobile_otp_screen || res != null && res.should_show_totp_screen))) {
              _context2.next = 29;
              break;
            }
            setOtpData({
              is_screen_visible: true,
              email: data.email || "",
              phone_number: data.phone_number || "",
              is_totp: (res == null ? void 0 : res.should_show_totp_screen) || false
            });
            return _context2.abrupt("return");
          case 29:
            if (res) {
              setError("");
              setAuthData({
                user: res.user || null,
                token: {
                  access_token: res.access_token,
                  expires_in: res.expires_in,
                  refresh_token: res.refresh_token,
                  id_token: res.id_token
                },
                config: config,
                loading: false
              });
            }
            if (onLogin) {
              onLogin(res);
            }
            _context2.next = 37;
            break;
          case 33:
            _context2.prev = 33;
            _context2.t0 = _context2["catch"](2);
            setLoading(false);
            setError(_context2.t0.message);
          case 37:
          case "end":
            return _context2.stop();
        }
      }, _callee2, null, [[2, 33]]);
    }));
    return function onSubmit(_x3) {
      return _ref3.apply(this, arguments);
    };
  }();
  var onErrorClose = function onErrorClose() {
    setError("");
  };
  useEffect(function () {
    if (formData.email_or_phone_number === '') {
      setErrorData(_extends({}, errorData, {
        email_or_phone_number: 'Email OR Phone Number is required'
      }));
    } else if (!isEmail(formData.email_or_phone_number || '') && !isMobilePhone(formData.email_or_phone_number || '')) {
      setErrorData(_extends({}, errorData, {
        email_or_phone_number: 'Invalid Email OR Phone Number'
      }));
    } else {
      setErrorData(_extends({}, errorData, {
        email_or_phone_number: null
      }));
    }
  }, [formData.email_or_phone_number]);
  useEffect(function () {
    if (formData.password === '') {
      setErrorData(_extends({}, errorData, {
        password: 'Password is required'
      }));
    } else {
      setErrorData(_extends({}, errorData, {
        password: null
      }));
    }
  }, [formData.password]);
  if (totpData.is_screen_visible) {
    return React.createElement(AuthorizerTOTPScanner, Object.assign({}, {
      setView: setView,
      onLogin: onLogin,
      email: totpData.email || "",
      phone_number: totpData.phone_number || "",
      authenticator_scanner_image: totpData.authenticator_scanner_image,
      authenticator_secret: totpData.authenticator_secret,
      authenticator_recovery_codes: totpData.authenticator_recovery_codes || []
    }, {
      urlProps: urlProps
    }));
  }
  if (otpData.is_screen_visible) {
    return React.createElement(AuthorizerVerifyOtp, Object.assign({}, {
      setView: setView,
      onLogin: onLogin,
      email: otpData.email || "",
      phone_number: otpData.phone_number || "",
      is_totp: otpData.is_totp || false
    }, {
      urlProps: urlProps
    }));
  }
  return React.createElement(React.Fragment, null, error && React.createElement(Message, {
    type: MessageType.Error,
    text: error,
    onClose: onErrorClose
  }), React.createElement(React.Fragment, null, React.createElement("form", {
    onSubmit: onSubmit,
    name: "authorizer-login-form"
  }, React.createElement("div", {
    className: styles['styled-form-group']
  }, React.createElement("label", {
    className: styles['form-input-label'],
    htmlFor: "authorizer-login-email"
  }, React.createElement("span", null, "* "), getEmailPhoneLabels(config)), React.createElement("input", {
    name: "email_or_phone_number",
    id: "authorizer-login-email-or-phone-number",
    className: styles['form-input-field'] + " " + (errorData.email_or_phone_number ? styles['input-error-content'] : null),
    placeholder: getEmailPhonePlaceholder(config),
    type: "text",
    value: formData.email_or_phone_number || '',
    onChange: function onChange(e) {
      return onInputChange('email_or_phone_number', e.target.value);
    }
  }), errorData.email_or_phone_number && React.createElement("div", {
    className: styles['form-input-error']
  }, errorData.email_or_phone_number)), React.createElement("div", {
    className: styles['styled-form-group']
  }, React.createElement("label", {
    className: styles['form-input-label'],
    htmlFor: "authorizer-login-password"
  }, React.createElement("span", null, "* "), "Password"), React.createElement("input", {
    name: "password",
    id: "authorizer-login-password",
    className: styles['form-input-field'] + " " + (errorData.password ? styles['input-error-content'] : null),
    placeholder: "********",
    type: "password",
    value: formData.password || '',
    onChange: function onChange(e) {
      return onInputChange('password', e.target.value);
    }
  }), errorData.password && React.createElement("div", {
    className: styles['form-input-error']
  }, errorData.password)), React.createElement("br", null), React.createElement(StyledButton, {
    type: "submit",
    disabled: !!errorData.email_or_phone_number || !!errorData.password || !formData.email_or_phone_number || !formData.password || loading,
    appearance: ButtonAppearance.Primary
  }, loading ? "Processing ..." : "Log In")), setView && React.createElement(StyledFooter, null, React.createElement(StyledLink, {
    onClick: function onClick() {
      return setView(Views.ForgotPassword);
    },
    marginBottom: "10px"
  }, "Forgot Password?"), config.is_sign_up_enabled && React.createElement("div", null, "Don't have an account?", ' ', React.createElement(StyledLink, {
    onClick: function onClick() {
      return setView(Views.Signup);
    }
  }, "Sign Up")))));
};

var AuthorizerMagicLinkLogin = function AuthorizerMagicLinkLogin(_ref) {
  var onMagicLinkLogin = _ref.onMagicLinkLogin,
    urlProps = _ref.urlProps,
    roles = _ref.roles;
  var _useState = useState(""),
    error = _useState[0],
    setError = _useState[1];
  var _useState2 = useState(false),
    loading = _useState2[0],
    setLoading = _useState2[1];
  var _useState3 = useState(""),
    successMessage = _useState3[0],
    setSuccessMessage = _useState3[1];
  var _useState4 = useState({
      email: null
    }),
    formData = _useState4[0],
    setFormData = _useState4[1];
  var _useState5 = useState({
      email: null
    }),
    errorData = _useState5[0],
    setErrorData = _useState5[1];
  var _useAuthorizer = useAuthorizer(),
    authorizerRef = _useAuthorizer.authorizerRef;
  var onInputChange = /*#__PURE__*/function () {
    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(field, value) {
      var _extends2;
      return _regeneratorRuntime().wrap(function _callee$(_context) {
        while (1) switch (_context.prev = _context.next) {
          case 0:
            setFormData(_extends({}, formData, (_extends2 = {}, _extends2[field] = value, _extends2)));
          case 1:
          case "end":
            return _context.stop();
        }
      }, _callee);
    }));
    return function onInputChange(_x, _x2) {
      return _ref2.apply(this, arguments);
    };
  }();
  var onSubmit = /*#__PURE__*/function () {
    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(e) {
      var data, _yield$authorizerRef$, res, errors, _errors$;
      return _regeneratorRuntime().wrap(function _callee2$(_context2) {
        while (1) switch (_context2.prev = _context2.next) {
          case 0:
            e.preventDefault();
            _context2.prev = 1;
            setLoading(true);
            data = {
              email: formData.email || '',
              state: (urlProps == null ? void 0 : urlProps.state) || '',
              redirect_uri: (urlProps == null ? void 0 : urlProps.redirect_uri) || ''
            };
            if (roles && roles.length) {
              data.roles = roles;
            }
            _context2.next = 7;
            return authorizerRef.magicLinkLogin(data);
          case 7:
            _yield$authorizerRef$ = _context2.sent;
            res = _yield$authorizerRef$.data;
            errors = _yield$authorizerRef$.errors;
            setLoading(false);
            if (!(errors && errors.length)) {
              _context2.next = 14;
              break;
            }
            setError(formatErrorMessage((_errors$ = errors[0]) == null ? void 0 : _errors$.message));
            return _context2.abrupt("return");
          case 14:
            if (res) {
              setError("");
              setSuccessMessage(res.message || "");
              if (onMagicLinkLogin) {
                onMagicLinkLogin(res);
              }
            }
            if (urlProps != null && urlProps.redirect_uri) {
              setTimeout(function () {
                window.location.replace(urlProps.redirect_uri);
              }, 3000);
            }
            _context2.next = 22;
            break;
          case 18:
            _context2.prev = 18;
            _context2.t0 = _context2["catch"](1);
            setLoading(false);
            setError(formatErrorMessage(_context2.t0 == null ? void 0 : _context2.t0.message));
          case 22:
          case "end":
            return _context2.stop();
        }
      }, _callee2, null, [[1, 18]]);
    }));
    return function onSubmit(_x3) {
      return _ref3.apply(this, arguments);
    };
  }();
  var onErrorClose = function onErrorClose() {
    setError("");
  };
  useEffect(function () {
    if (formData.email === '') {
      setErrorData(_extends({}, errorData, {
        email: 'Email is required'
      }));
    } else if (formData.email && !isEmail(formData.email)) {
      setErrorData(_extends({}, errorData, {
        email: 'Please enter valid email'
      }));
    } else {
      setErrorData(_extends({}, errorData, {
        email: null
      }));
    }
  }, [formData.email]);
  if (successMessage) {
    return React.createElement(Message, {
      type: MessageType.Success,
      text: successMessage
    });
  }
  return React.createElement(React.Fragment, null, error && React.createElement(Message, {
    type: MessageType.Error,
    text: error,
    onClose: onErrorClose
  }), React.createElement("form", {
    onSubmit: onSubmit,
    name: "authorizer-magic-login-form"
  }, React.createElement("div", {
    className: styles['styled-form-group']
  }, React.createElement("label", {
    className: styles['form-input-label'],
    htmlFor: "authorizer-magic-link-login-email"
  }, React.createElement("span", null, "* "), "Email"), React.createElement("input", {
    name: "email",
    id: "authorizer-magic-link-login-email",
    className: styles['form-input-field'] + " " + (errorData.email ? styles['input-error-content'] : null),
    placeholder: "eg. foo@bar.com",
    type: "email",
    value: formData.email || '',
    onChange: function onChange(e) {
      return onInputChange('email', e.target.value);
    }
  }), errorData.email && React.createElement("div", {
    className: styles['form-input-error']
  }, errorData.email)), React.createElement("br", null), React.createElement(StyledButton, {
    type: "submit",
    disabled: loading || !!errorData.email || !formData.email,
    appearance: ButtonAppearance.Primary
  }, loading ? "Processing ..." : "Send Email")));
};

var getSearchParams = function getSearchParams(search) {
  if (search === void 0) {
    search = '';
  }
  var searchPrams = search;
  if (!searchPrams && hasWindow()) {
    searchPrams = window.location.search;
  }
  var urlSearchParams = new URLSearchParams("" + searchPrams);
  // @ts-ignore
  var params = Object.fromEntries(urlSearchParams.entries());
  return params;
};

var AuthorizerResetPassword = function AuthorizerResetPassword(_ref) {
  var onReset = _ref.onReset,
    showOTPInput = _ref.showOTPInput,
    phone_number = _ref.phone_number;
  var _getSearchParams = getSearchParams(),
    token = _getSearchParams.token,
    redirect_uri = _getSearchParams.redirect_uri;
  var _useState = useState(''),
    error = _useState[0],
    setError = _useState[1];
  var _useState2 = useState(false),
    loading = _useState2[0],
    setLoading = _useState2[1];
  var _useState3 = useState({
      otp: null,
      password: null,
      confirmPassword: null
    }),
    formData = _useState3[0],
    setFormData = _useState3[1];
  var _useState4 = useState({
      otp: null,
      password: null,
      confirmPassword: null
    }),
    errorData = _useState4[0],
    setErrorData = _useState4[1];
  var _useAuthorizer = useAuthorizer(),
    authorizerRef = _useAuthorizer.authorizerRef,
    config = _useAuthorizer.config;
  var _useState5 = useState(false),
    disableContinueButton = _useState5[0],
    setDisableContinueButton = _useState5[1];
  var onInputChange = /*#__PURE__*/function () {
    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(field, value) {
      var _extends2;
      return _regeneratorRuntime().wrap(function _callee$(_context) {
        while (1) switch (_context.prev = _context.next) {
          case 0:
            setFormData(_extends({}, formData, (_extends2 = {}, _extends2[field] = value, _extends2)));
          case 1:
          case "end":
            return _context.stop();
        }
      }, _callee);
    }));
    return function onInputChange(_x, _x2) {
      return _ref2.apply(this, arguments);
    };
  }();
  var onSubmit = /*#__PURE__*/function () {
    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(e) {
      var _yield$authorizerRef$, res, errors, _errors$;
      return _regeneratorRuntime().wrap(function _callee2$(_context2) {
        while (1) switch (_context2.prev = _context2.next) {
          case 0:
            e.preventDefault();
            setLoading(true);
            _context2.prev = 2;
            _context2.next = 5;
            return authorizerRef.resetPassword({
              token: token,
              otp: formData.otp || '',
              phone_number: phone_number || '',
              password: formData.password || '',
              confirm_password: formData.confirmPassword || ''
            });
          case 5:
            _yield$authorizerRef$ = _context2.sent;
            res = _yield$authorizerRef$.data;
            errors = _yield$authorizerRef$.errors;
            setLoading(false);
            if (!(errors && errors.length)) {
              _context2.next = 12;
              break;
            }
            setError(formatErrorMessage((_errors$ = errors[0]) == null ? void 0 : _errors$.message));
            return _context2.abrupt("return");
          case 12:
            setError("");
            if (onReset) {
              onReset(res);
            } else {
              window.location.href = redirect_uri || config.redirectURL || window.location.origin;
            }
            _context2.next = 20;
            break;
          case 16:
            _context2.prev = 16;
            _context2.t0 = _context2["catch"](2);
            setLoading(false);
            setError(formatErrorMessage(_context2.t0.message));
          case 20:
          case "end":
            return _context2.stop();
        }
      }, _callee2, null, [[2, 16]]);
    }));
    return function onSubmit(_x3) {
      return _ref3.apply(this, arguments);
    };
  }();
  var onErrorClose = function onErrorClose() {
    setError("");
  };
  useEffect(function () {
    if (formData.password === '') {
      setErrorData(_extends({}, errorData, {
        password: 'Password is required'
      }));
    } else {
      setErrorData(_extends({}, errorData, {
        password: null
      }));
    }
  }, [formData.password]);
  useEffect(function () {
    if (formData.confirmPassword === '') {
      setErrorData(_extends({}, errorData, {
        confirmPassword: 'Confirm password is required'
      }));
    } else {
      setErrorData(_extends({}, errorData, {
        confirmPassword: null
      }));
    }
  }, [formData.confirmPassword]);
  useEffect(function () {
    if (formData.password && formData.confirmPassword) {
      if (formData.confirmPassword !== formData.password) {
        setErrorData(_extends({}, errorData, {
          password: "Password and confirm passwords don't match",
          confirmPassword: "Password and confirm passwords don't match"
        }));
      } else {
        setErrorData(_extends({}, errorData, {
          password: null,
          confirmPassword: null
        }));
      }
    }
  }, [formData.password, formData.confirmPassword]);
  return React.createElement(StyledWrapper, null, error && React.createElement(Message, {
    type: MessageType.Error,
    text: error,
    onClose: onErrorClose
  }), React.createElement("form", {
    onSubmit: onSubmit,
    name: "authorizer-reset-password-form"
  }, showOTPInput && React.createElement("div", {
    className: styles['styled-form-group']
  }, React.createElement("label", {
    className: styles['form-input-label'],
    htmlFor: "authorizer-verify-otp"
  }, React.createElement("span", null, "* "), "OTP (One Time Password)"), React.createElement("input", {
    name: "otp",
    id: "authorizer-verify-otp",
    className: styles['form-input-field'] + " " + (errorData.otp ? styles['input-error-content'] : null),
    placeholder: "e.g.- AB123C",
    type: "password",
    value: formData.otp || '',
    onChange: function onChange(e) {
      return onInputChange('otp', e.target.value);
    }
  }), errorData.otp && React.createElement("div", {
    className: styles['form-input-error']
  }, errorData.otp)), React.createElement("div", {
    className: styles['styled-form-group']
  }, React.createElement("label", {
    className: styles['form-input-label'],
    htmlFor: "authorizer-reset-password"
  }, React.createElement("span", null, "* "), "Password"), React.createElement("input", {
    name: "password",
    id: "authorizer-reset-password",
    className: styles['form-input-field'] + " " + (errorData.password ? styles['input-error-content'] : null),
    placeholder: "********",
    type: "password",
    value: formData.password || '',
    onChange: function onChange(e) {
      return onInputChange('password', e.target.value);
    }
  }), errorData.password && React.createElement("div", {
    className: styles['form-input-error']
  }, errorData.password)), React.createElement("div", {
    className: styles['styled-form-group']
  }, React.createElement("label", {
    className: styles['form-input-label'],
    htmlFor: "authorizer-reset-confirm-password"
  }, React.createElement("span", null, "* "), "Confirm Password"), React.createElement("input", {
    name: "confirmPassword",
    id: "authorizer-reset-confirm-password",
    className: styles['form-input-field'] + " " + (errorData.confirmPassword ? styles['input-error-content'] : null),
    placeholder: "********",
    type: "password",
    value: formData.confirmPassword || '',
    onChange: function onChange(e) {
      return onInputChange('confirmPassword', e.target.value);
    }
  }), errorData.confirmPassword && React.createElement("div", {
    className: styles['form-input-error']
  }, errorData.confirmPassword)), config.is_strong_password_enabled && React.createElement(React.Fragment, null, React.createElement(PasswordStrengthIndicator, {
    value: formData.password || '',
    setDisableButton: setDisableContinueButton
  }), React.createElement("br", null)), React.createElement(StyledButton, {
    type: "submit",
    disabled: loading || disableContinueButton || !!errorData.password || !!errorData.confirmPassword || !formData.password || !formData.confirmPassword,
    appearance: ButtonAppearance.Primary
  }, loading ? "Processing ..." : "Continue")));
};

var initOtpData$2 = {
  is_screen_visible: false,
  email: '',
  phone_number: ''
};
var AuthorizerForgotPassword = function AuthorizerForgotPassword(_ref) {
  var setView = _ref.setView,
    onForgotPassword = _ref.onForgotPassword,
    onPasswordReset = _ref.onPasswordReset,
    urlProps = _ref.urlProps;
  var _useState = useState(""),
    error = _useState[0],
    setError = _useState[1];
  var _useState2 = useState(false),
    loading = _useState2[0],
    setLoading = _useState2[1];
  var _useState3 = useState(""),
    successMessage = _useState3[0],
    setSuccessMessage = _useState3[1];
  var _useState4 = useState(_extends({}, initOtpData$2)),
    otpData = _useState4[0],
    setOtpData = _useState4[1];
  var _useState5 = useState({
      email_or_phone_number: null
    }),
    formData = _useState5[0],
    setFormData = _useState5[1];
  var _useState6 = useState({
      email_or_phone_number: null
    }),
    errorData = _useState6[0],
    setErrorData = _useState6[1];
  var _useAuthorizer = useAuthorizer(),
    authorizerRef = _useAuthorizer.authorizerRef,
    config = _useAuthorizer.config;
  var onInputChange = /*#__PURE__*/function () {
    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(field, value) {
      var _extends2;
      return _regeneratorRuntime().wrap(function _callee$(_context) {
        while (1) switch (_context.prev = _context.next) {
          case 0:
            setFormData(_extends({}, formData, (_extends2 = {}, _extends2[field] = value, _extends2)));
          case 1:
          case "end":
            return _context.stop();
        }
      }, _callee);
    }));
    return function onInputChange(_x, _x2) {
      return _ref2.apply(this, arguments);
    };
  }();
  var onSubmit = /*#__PURE__*/function () {
    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(e) {
      var email, phone_number, _yield$authorizerRef$, res, errors, _errors$;
      return _regeneratorRuntime().wrap(function _callee2$(_context2) {
        while (1) switch (_context2.prev = _context2.next) {
          case 0:
            e.preventDefault();
            _context2.prev = 1;
            setLoading(true);
            email = '';
            phone_number = '';
            if (formData.email_or_phone_number) {
              if (isEmail(formData.email_or_phone_number)) {
                email = formData.email_or_phone_number;
              } else if (isMobilePhone(formData.email_or_phone_number)) {
                phone_number = formData.email_or_phone_number;
              }
            }
            if (!(!email && !phone_number)) {
              _context2.next = 10;
              break;
            }
            setErrorData(_extends({}, errorData, {
              email_or_phone_number: 'Invalid email or phone number'
            }));
            setLoading(false);
            return _context2.abrupt("return");
          case 10:
            _context2.next = 12;
            return authorizerRef.forgotPassword({
              email: email,
              phone_number: phone_number,
              state: (urlProps == null ? void 0 : urlProps.state) || '',
              redirect_uri: (urlProps == null ? void 0 : urlProps.redirect_uri) || config.redirectURL || window.location.origin
            });
          case 12:
            _yield$authorizerRef$ = _context2.sent;
            res = _yield$authorizerRef$.data;
            errors = _yield$authorizerRef$.errors;
            setLoading(false);
            if (!(errors && errors.length)) {
              _context2.next = 19;
              break;
            }
            setError(formatErrorMessage((_errors$ = errors[0]) == null ? void 0 : _errors$.message));
            return _context2.abrupt("return");
          case 19:
            if (!(res != null && res.message)) {
              _context2.next = 25;
              break;
            }
            setError("");
            setSuccessMessage(res.message);
            if (!(res != null && res.should_show_mobile_otp_screen)) {
              _context2.next = 25;
              break;
            }
            setOtpData(_extends({}, otpData, {
              is_screen_visible: true,
              email: email,
              phone_number: phone_number
            }));
            return _context2.abrupt("return");
          case 25:
            if (onForgotPassword) {
              onForgotPassword(res);
            }
            _context2.next = 32;
            break;
          case 28:
            _context2.prev = 28;
            _context2.t0 = _context2["catch"](1);
            setLoading(false);
            setError(formatErrorMessage(_context2.t0 == null ? void 0 : _context2.t0.message));
          case 32:
          case "end":
            return _context2.stop();
        }
      }, _callee2, null, [[1, 28]]);
    }));
    return function onSubmit(_x3) {
      return _ref3.apply(this, arguments);
    };
  }();
  var onErrorClose = function onErrorClose() {
    setError("");
  };
  useEffect(function () {
    if (formData.email_or_phone_number === '') {
      setErrorData(_extends({}, errorData, {
        email_or_phone_number: 'Email OR Phone Number is required'
      }));
    } else if (formData.email_or_phone_number !== null && !isEmail(formData.email_or_phone_number || '') && !isMobilePhone(formData.email_or_phone_number || '')) {
      setErrorData(_extends({}, errorData, {
        email_or_phone_number: 'Invalid Email OR Phone Number'
      }));
    } else {
      setErrorData(_extends({}, errorData, {
        email_or_phone_number: null
      }));
    }
  }, [formData.email_or_phone_number]);
  if (successMessage) {
    return React.createElement(React.Fragment, null, React.createElement(Message, {
      type: MessageType.Success,
      text: successMessage
    }), otpData.is_screen_visible && React.createElement(AuthorizerResetPassword, {
      showOTPInput: true,
      onReset: onPasswordReset,
      phone_number: otpData.phone_number
    }));
  }
  return React.createElement(React.Fragment, null, error && React.createElement(Message, {
    type: MessageType.Error,
    text: error,
    onClose: onErrorClose
  }), React.createElement("p", {
    style: {
      textAlign: 'center',
      margin: '10px 0px'
    }
  }, "Please enter your ", getEmailPhoneLabels(config), ".", React.createElement("br", null), " We will send you an email / otp to reset your password."), React.createElement("br", null), React.createElement("form", {
    onSubmit: onSubmit,
    name: "authorizer-forgot-password-form"
  }, React.createElement("div", {
    className: styles['styled-form-group']
  }, React.createElement("label", {
    className: styles['form-input-label'],
    htmlFor: "authorizer-forgot-password-email-or-phone-number"
  }, React.createElement("span", null, "* "), getEmailPhoneLabels(config)), React.createElement("input", {
    name: "email_or_phone_number",
    id: "authorizer-forgot-password-email-or-phone-number",
    className: styles['form-input-field'] + " " + (errorData.email_or_phone_number ? styles['input-error-content'] : null),
    placeholder: getEmailPhonePlaceholder(config),
    type: "text",
    value: formData.email_or_phone_number || '',
    onChange: function onChange(e) {
      return onInputChange('email_or_phone_number', e.target.value);
    }
  }), errorData.email_or_phone_number && React.createElement("div", {
    className: styles['form-input-error']
  }, errorData.email_or_phone_number)), React.createElement("br", null), React.createElement(StyledButton, {
    type: "submit",
    disabled: loading || !!errorData.email_or_phone_number || !formData.email_or_phone_number,
    appearance: ButtonAppearance.Primary
  }, loading ? "Processing ..." : "Request Change")), setView && React.createElement(StyledFooter, null, React.createElement("div", null, "Remember your password?", ' ', React.createElement(StyledLink, {
    onClick: function onClick() {
      return setView(Views.Login);
    }
  }, "Log In"))));
};

var Github = function Github() {
  return React.createElement("div", {
    style: {
      position: 'absolute',
      left: '10px',
      top: '12px',
      display: 'flex'
    }
  }, React.createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 291.32 291.32",
    width: "24px",
    height: "24px"
  }, React.createElement("path", {
    d: "M145.66 0C65.219 0 0 65.219 0 145.66c0 80.45 65.219 145.66 145.66 145.66s145.66-65.21 145.66-145.66C291.319 65.219 226.1 0 145.66 0zm40.802 256.625c-.838-11.398-1.775-25.518-1.83-31.235-.364-4.388-.838-15.549-11.434-22.677 42.068-3.523 62.087-26.774 63.526-57.499 1.202-17.497-5.754-32.883-18.107-45.3.628-13.282-.401-29.023-1.256-35.941-9.486-2.731-31.608 8.949-37.79 13.947-13.037-5.062-44.945-6.837-64.336 0-13.747-9.668-29.396-15.64-37.926-13.974-7.875 17.452-2.813 33.948-1.275 35.914-10.142 9.268-24.289 20.675-20.447 44.572 6.163 35.04 30.816 53.94 70.508 58.564-8.466 1.73-9.896 8.048-10.606 10.788-26.656 10.997-34.275-6.791-37.644-11.425-11.188-13.847-21.23-9.832-21.849-9.614-.601.218-1.056 1.092-.992 1.511.564 2.986 6.655 6.018 6.955 6.263 8.257 6.154 11.316 17.27 13.2 20.438 11.844 19.473 39.374 11.398 39.638 11.562.018 1.702-.191 16.032-.355 27.184C64.245 245.992 27.311 200.2 27.311 145.66c0-65.365 52.984-118.348 118.348-118.348S264.008 80.295 264.008 145.66c0 51.008-32.318 94.332-77.546 110.965z",
    fill: "#2b414d"
  })));
};

var Google = function Google() {
  return React.createElement("div", {
    style: {
      position: 'absolute',
      left: '10px',
      top: '12px',
      display: 'flex'
    }
  }, React.createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    width: "24px",
    height: "24px"
  }, React.createElement("g", {
    transform: "matrix(1, 0, 0, 1, 27.009001, -39.238998)"
  }, React.createElement("path", {
    fill: "#4285F4",
    d: "M -3.264 51.509 C -3.264 50.719 -3.334 49.969 -3.454 49.239 L -14.754 49.239 L -14.754 53.749 L -8.284 53.749 C -8.574 55.229 -9.424 56.479 -10.684 57.329 L -10.684 60.329 L -6.824 60.329 C -4.564 58.239 -3.264 55.159 -3.264 51.509 Z"
  }), React.createElement("path", {
    fill: "#34A853",
    d: "M -14.754 63.239 C -11.514 63.239 -8.804 62.159 -6.824 60.329 L -10.684 57.329 C -11.764 58.049 -13.134 58.489 -14.754 58.489 C -17.884 58.489 -20.534 56.379 -21.484 53.529 L -25.464 53.529 L -25.464 56.619 C -23.494 60.539 -19.444 63.239 -14.754 63.239 Z"
  }), React.createElement("path", {
    fill: "#FBBC05",
    d: "M -21.484 53.529 C -21.734 52.809 -21.864 52.039 -21.864 51.239 C -21.864 50.439 -21.724 49.669 -21.484 48.949 L -21.484 45.859 L -25.464 45.859 C -26.284 47.479 -26.754 49.299 -26.754 51.239 C -26.754 53.179 -26.284 54.999 -25.464 56.619 L -21.484 53.529 Z"
  }), React.createElement("path", {
    fill: "#EA4335",
    d: "M -14.754 43.989 C -12.984 43.989 -11.404 44.599 -10.154 45.789 L -6.734 42.369 C -8.804 40.429 -11.514 39.239 -14.754 39.239 C -19.444 39.239 -23.494 41.939 -25.464 45.859 L -21.484 48.949 C -20.534 46.099 -17.884 43.989 -14.754 43.989 Z"
  }))));
};

var Facebook = function Facebook() {
  return React.createElement("div", {
    style: {
      position: 'absolute',
      left: '10px',
      top: '12px',
      display: 'flex'
    }
  }, React.createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 50 50",
    width: "24px",
    height: "24px",
    fill: "#1877f2"
  }, React.createElement("path", {
    d: "M41,4H9C6.24,4,4,6.24,4,9v32c0,2.76,2.24,5,5,5h32c2.76,0,5-2.24,5-5V9C46,6.24,43.76,4,41,4z M37,19h-2c-2.14,0-3,0.5-3,2 v3h5l-1,5h-4v15h-5V29h-4v-5h4v-3c0-4,2-7,6-7c2.9,0,4,1,4,1V19z"
  })));
};

var getCrypto = function getCrypto() {
  //ie 11.x uses msCrypto
  return hasWindow() ? window.crypto || window.msCrypto : null;
};
var createRandomString = function createRandomString() {
  var charset = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-_~.';
  var random = '';
  var crypto = getCrypto();
  if (crypto) {
    var randomValues = Array.from(crypto.getRandomValues(new Uint8Array(43)));
    randomValues.forEach(function (v) {
      return random += charset[v % charset.length];
    });
  }
  return random;
};
var createQueryParams = function createQueryParams(params) {
  return Object.keys(params).filter(function (k) {
    return typeof params[k] !== 'undefined';
  }).map(function (k) {
    return encodeURIComponent(k) + '=' + encodeURIComponent(params[k]);
  }).join('&');
};

var LinkedIn = function LinkedIn() {
  return React.createElement("div", {
    style: {
      position: 'absolute',
      left: '8px',
      top: '7.5px',
      display: 'flex'
    }
  }, React.createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 48 48",
    width: "32px",
    height: "32px"
  }, React.createElement("path", {
    fill: "#0288D1",
    d: "M42,37c0,2.762-2.238,5-5,5H11c-2.761,0-5-2.238-5-5V11c0-2.762,2.239-5,5-5h26c2.762,0,5,2.238,5,5V37z"
  }), React.createElement("path", {
    fill: "#FFF",
    d: "M12 19H17V36H12zM14.485 17h-.028C12.965 17 12 15.888 12 14.499 12 13.08 12.995 12 14.514 12c1.521 0 2.458 1.08 2.486 2.499C17 15.887 16.035 17 14.485 17zM36 36h-5v-9.099c0-2.198-1.225-3.698-3.192-3.698-1.501 0-2.313 1.012-2.707 1.99C24.957 25.543 25 26.511 25 27v9h-5V19h5v2.616C25.721 20.5 26.85 19 29.738 19c3.578 0 6.261 2.25 6.261 7.274L36 36 36 36z"
  })));
};

var Apple = function Apple() {
  return React.createElement("div", {
    style: {
      position: 'absolute',
      left: '10px',
      top: '10px',
      display: 'flex'
    }
  }, React.createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 256 315",
    width: "24px",
    height: "24px"
  }, React.createElement("path", {
    d: "M213.803 167.03c.442 47.58 41.74 63.413 42.197 63.615-.35 1.116-6.599 22.563-21.757 44.716-13.104 19.153-26.705 38.235-48.13 38.63-21.05.388-27.82-12.483-51.888-12.483-24.061 0-31.582 12.088-51.51 12.871-20.68.783-36.428-20.71-49.64-39.793-27-39.033-47.633-110.3-19.928-158.406 13.763-23.89 38.36-39.017 65.056-39.405 20.307-.387 39.475 13.662 51.889 13.662 12.406 0 35.699-16.895 60.186-14.414 10.25.427 39.026 4.14 57.503 31.186-1.49.923-34.335 20.044-33.978 59.822M174.24 50.199c10.98-13.29 18.369-31.79 16.353-50.199-15.826.636-34.962 10.546-46.314 23.828-10.173 11.763-19.082 30.589-16.678 48.633 17.64 1.365 35.66-8.964 46.64-22.262"
  })));
};

var Twitter = function Twitter() {
  return React.createElement("div", {
    style: {
      position: 'absolute',
      left: '10px',
      top: '12px',
      display: 'flex'
    }
  }, React.createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 48 48",
    width: "24px",
    height: "24px"
  }, React.createElement("path", {
    fill: "#03A9F4",
    d: "M42,12.429c-1.323,0.586-2.746,0.977-4.247,1.162c1.526-0.906,2.7-2.351,3.251-4.058c-1.428,0.837-3.01,1.452-4.693,1.776C34.967,9.884,33.05,9,30.926,9c-4.08,0-7.387,3.278-7.387,7.32c0,0.572,0.067,1.129,0.193,1.67c-6.138-0.308-11.582-3.226-15.224-7.654c-0.64,1.082-1,2.349-1,3.686c0,2.541,1.301,4.778,3.285,6.096c-1.211-0.037-2.351-0.374-3.349-0.914c0,0.022,0,0.055,0,0.086c0,3.551,2.547,6.508,5.923,7.181c-0.617,0.169-1.269,0.263-1.941,0.263c-0.477,0-0.942-0.054-1.392-0.135c0.94,2.902,3.667,5.023,6.898,5.086c-2.528,1.96-5.712,3.134-9.174,3.134c-0.598,0-1.183-0.034-1.761-0.104C9.268,36.786,13.152,38,17.321,38c13.585,0,21.017-11.156,21.017-20.834c0-0.317-0.01-0.633-0.025-0.945C39.763,15.197,41.013,13.905,42,12.429"
  })));
};

var Microsoft = function Microsoft() {
  return React.createElement("div", {
    style: {
      position: 'absolute',
      left: '10px',
      top: '12px',
      display: 'flex'
    }
  }, React.createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 48 48",
    width: "24px",
    height: "24px"
  }, React.createElement("path", {
    fill: "#ff5722",
    d: "M6 6H22V22H6z",
    transform: "rotate(-180 14 14)"
  }), React.createElement("path", {
    fill: "#4caf50",
    d: "M26 6H42V22H26z",
    transform: "rotate(-180 34 14)"
  }), React.createElement("path", {
    fill: "#ffc107",
    d: "M26 26H42V42H26z",
    transform: "rotate(-180 34 34)"
  }), React.createElement("path", {
    fill: "#03a9f4",
    d: "M6 26H22V42H6z",
    transform: "rotate(-180 14 34)"
  })));
};

var Twitch = function Twitch() {
  return React.createElement("div", {
    style: {
      position: 'absolute',
      left: '10px',
      top: '12px',
      display: 'flex'
    }
  }, React.createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    height: "24",
    width: "24",
    viewBox: "0 0 512 512"
  }, React.createElement("path", {
    d: "M391.2 103.5H352.5v109.7h38.6zM285 103H246.4V212.8H285zM120.8 0 24.3 91.4V420.6H140.1V512l96.5-91.4h77.3L487.7 256V0zM449.1 237.8l-77.2 73.1H294.6l-67.6 64v-64H140.1V36.6H449.1z"
  })));
};

var Roblox = function Roblox() {
  return React.createElement("div", {
    style: {
      position: 'absolute',
      left: '10px',
      top: '12px',
      display: 'flex'
    }
  }, React.createElement("img", {
    src: "https://authorizer.dev/_next/image?url=%2Fimages%2Froblox.png&w=24&q=24",
    alt: "roblox_logo"
  }));
};

var AuthorizerSocialLogin = function AuthorizerSocialLogin(_ref) {
  var urlProps = _ref.urlProps,
    roles = _ref.roles;
  var _useAuthorizer = useAuthorizer(),
    config = _useAuthorizer.config;
  var hasSocialLogin = config.is_google_login_enabled || config.is_github_login_enabled || config.is_facebook_login_enabled || config.is_linkedin_login_enabled || config.is_apple_login_enabled || config.is_twitter_login_enabled || config.is_microsoft_login_enabled || config.is_twitch_login_enabled || config.is_roblox_login_enabled;
  var data = _extends({}, urlProps || {}, {
    scope: urlProps == null ? void 0 : urlProps.scope.join(' ')
  });
  if (roles && roles.length) {
    data.roles = roles;
  }
  if (!data.redirect_uri && !data.redirectURL) {
    data.redirect_uri = config.redirectURL;
  }
  var queryParams = createQueryParams(data);
  return React.createElement(React.Fragment, null, config.is_apple_login_enabled && React.createElement("div", {
    id: "appleid-signin"
  }, React.createElement(StyledButton, {
    appearance: ButtonAppearance.Default,
    onClick: function onClick() {
      window.location.href = config.authorizerURL + "/oauth_login/apple?" + queryParams;
    }
  }, React.createElement(Apple, null), "Continue with Apple"), React.createElement("br", null)), config.is_google_login_enabled && React.createElement(React.Fragment, null, React.createElement(StyledButton, {
    appearance: ButtonAppearance.Default,
    onClick: function onClick() {
      window.location.href = config.authorizerURL + "/oauth_login/google?" + queryParams;
    }
  }, React.createElement(Google, null), "Continue with Google"), React.createElement("br", null)), config.is_github_login_enabled && React.createElement(React.Fragment, null, React.createElement(StyledButton, {
    appearance: ButtonAppearance.Default,
    onClick: function onClick() {
      window.location.href = config.authorizerURL + "/oauth_login/github?" + queryParams;
    }
  }, React.createElement(Github, null), "Continue with Github"), React.createElement("br", null)), config.is_facebook_login_enabled && React.createElement(React.Fragment, null, React.createElement(StyledButton, {
    appearance: ButtonAppearance.Default,
    onClick: function onClick() {
      window.location.href = config.authorizerURL + "/oauth_login/facebook?" + queryParams;
    }
  }, React.createElement(Facebook, null), "Continue with Facebook"), React.createElement("br", null)), config.is_linkedin_login_enabled && React.createElement(React.Fragment, null, React.createElement(StyledButton, {
    appearance: ButtonAppearance.Default,
    onClick: function onClick() {
      window.location.href = config.authorizerURL + "/oauth_login/linkedin?" + queryParams;
    }
  }, React.createElement(LinkedIn, null), "Continue with LinkedIn"), React.createElement("br", null)), config.is_twitter_login_enabled && React.createElement(React.Fragment, null, React.createElement(StyledButton, {
    appearance: ButtonAppearance.Default,
    onClick: function onClick() {
      window.location.href = config.authorizerURL + "/oauth_login/twitter?" + queryParams;
    }
  }, React.createElement(Twitter, null), "Continue with Twitter"), React.createElement("br", null)), config.is_microsoft_login_enabled && React.createElement(React.Fragment, null, React.createElement(StyledButton, {
    appearance: ButtonAppearance.Default,
    onClick: function onClick() {
      window.location.href = config.authorizerURL + "/oauth_login/microsoft?" + queryParams;
    }
  }, React.createElement(Microsoft, null), "Continue with Microsoft"), React.createElement("br", null)), config.is_twitch_login_enabled && React.createElement(React.Fragment, null, React.createElement(StyledButton, {
    appearance: ButtonAppearance.Default,
    onClick: function onClick() {
      window.location.href = config.authorizerURL + "/oauth_login/twitch?" + queryParams;
    }
  }, React.createElement(Twitch, null), "Continue with Twitch"), React.createElement("br", null)), config.is_roblox_login_enabled && React.createElement(React.Fragment, null, React.createElement(StyledButton, {
    appearance: ButtonAppearance.Default,
    onClick: function onClick() {
      window.location.href = config.authorizerURL + "/oauth_login/roblox?" + queryParams;
    }
  }, React.createElement(Roblox, null), "Continue with Roblox"), React.createElement("br", null)), hasSocialLogin && (config.is_basic_authentication_enabled || config.is_mobile_basic_authentication_enabled || config.is_magic_link_login_enabled) && React.createElement(StyledSeparator, null, "OR"));
};

var AuthorizerRoot = function AuthorizerRoot(_ref) {
  var _searchParams$get;
  var onLogin = _ref.onLogin,
    onSignup = _ref.onSignup,
    onMagicLinkLogin = _ref.onMagicLinkLogin,
    onForgotPassword = _ref.onForgotPassword,
    onPasswordReset = _ref.onPasswordReset,
    roles = _ref.roles;
  var _useState = useState(Views.Login),
    view = _useState[0],
    setView = _useState[1];
  var _useAuthorizer = useAuthorizer(),
    config = _useAuthorizer.config;
  var searchParams = new URLSearchParams(hasWindow() ? window.location.search : "");
  var state = searchParams.get('state') || createRandomString();
  var scope = searchParams.get('scope') ? (_searchParams$get = searchParams.get('scope')) == null ? void 0 : _searchParams$get.toString().split(' ') : ['openid', 'profile', 'email'];
  var urlProps = {
    state: state,
    scope: scope
  };
  var redirectURL = searchParams.get('redirect_uri') || searchParams.get('redirectURL');
  if (redirectURL) {
    urlProps.redirectURL = redirectURL;
  } else {
    urlProps.redirectURL = hasWindow() ? window.location.origin : redirectURL;
  }
  urlProps.redirect_uri = urlProps.redirectURL;
  return React.createElement(StyledWrapper, null, React.createElement(AuthorizerSocialLogin, {
    urlProps: urlProps,
    roles: roles
  }), view === Views.Login && (config.is_basic_authentication_enabled || config.is_mobile_basic_authentication_enabled) && !config.is_magic_link_login_enabled && React.createElement(AuthorizerBasicAuthLogin, {
    setView: setView,
    onLogin: onLogin,
    urlProps: urlProps,
    roles: roles
  }), view === Views.Signup && (config.is_basic_authentication_enabled || config.is_mobile_basic_authentication_enabled) && !config.is_magic_link_login_enabled && config.is_sign_up_enabled && React.createElement(AuthorizerSignup, {
    setView: setView,
    onSignup: onSignup,
    urlProps: urlProps,
    roles: roles
  }), view === Views.Login && config.is_magic_link_login_enabled && React.createElement(AuthorizerMagicLinkLogin, {
    onMagicLinkLogin: onMagicLinkLogin,
    urlProps: urlProps,
    roles: roles
  }), view === Views.ForgotPassword && React.createElement(AuthorizerForgotPassword, {
    setView: setView,
    onForgotPassword: onForgotPassword,
    onPasswordReset: onPasswordReset,
    urlProps: urlProps
  }));
};

export { AuthorizerRoot as Authorizer, AuthorizerBasicAuthLogin, AuthorizerForgotPassword, AuthorizerMagicLinkLogin, AuthorizerProvider, AuthorizerResetPassword, AuthorizerSignup, AuthorizerSocialLogin, AuthorizerTOTPScanner, AuthorizerVerifyOtp, useAuthorizer };
//# sourceMappingURL=authorizer-react.esm.js.map
