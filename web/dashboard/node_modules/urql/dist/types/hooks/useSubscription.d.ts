import { DocumentNode } from 'graphql';
import { TypedDocumentNode, CombinedError, OperationContext, Operation } from '@urql/core';
export interface UseSubscriptionArgs<Variables = object, Data = any> {
    query: DocumentNode | TypedDocumentNode<Data, Variables> | string;
    variables?: Variables;
    pause?: boolean;
    context?: Partial<OperationContext>;
}
export declare type SubscriptionHandler<T, R> = (prev: R | undefined, data: T) => R;
export interface UseSubscriptionState<Data = any, Variables = object> {
    fetching: boolean;
    stale: boolean;
    data?: Data;
    error?: CombinedError;
    extensions?: Record<string, any>;
    operation?: Operation<Data, Variables>;
}
export declare type UseSubscriptionResponse<Data = any, Variables = object> = [
    UseSubscriptionState<Data, Variables>,
    (opts?: Partial<OperationContext>) => void
];
export declare function useSubscription<Data = any, Result = Data, Variables = object>(args: UseSubscriptionArgs<Variables, Data>, handler?: SubscriptionHandler<Data, Result>): UseSubscriptionResponse<Result, Variables>;
