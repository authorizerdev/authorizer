import { DocumentNode } from 'graphql';
import { TypedDocumentNode, CombinedError, OperationContext, RequestPolicy, Operation } from '@urql/core';
export interface UseQueryArgs<Variables = object, Data = any> {
    query: string | DocumentNode | TypedDocumentNode<Data, Variables>;
    variables?: Variables;
    requestPolicy?: RequestPolicy;
    context?: Partial<OperationContext>;
    pause?: boolean;
}
export interface UseQueryState<Data = any, Variables = object> {
    fetching: boolean;
    stale: boolean;
    data?: Data;
    error?: CombinedError;
    extensions?: Record<string, any>;
    operation?: Operation<Data, Variables>;
}
export declare type UseQueryResponse<Data = any, Variables = object> = [
    UseQueryState<Data, Variables>,
    (opts?: Partial<OperationContext>) => void
];
export declare function useQuery<Data = any, Variables = object>(args: UseQueryArgs<Variables, Data>): UseQueryResponse<Data, Variables>;
