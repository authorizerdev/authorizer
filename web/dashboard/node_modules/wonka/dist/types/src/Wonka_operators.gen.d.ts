import { operatorT as Wonka_types_operatorT } from './Wonka_types.gen';
import { sourceT as Wonka_types_sourceT } from './Wonka_types.gen';
export declare const buffer: <a, b>(notifier: Wonka_types_sourceT<a>) => Wonka_types_operatorT<b, b[]>;
export declare const combine: <a, b>(sourceA: Wonka_types_sourceT<a>, sourceB: Wonka_types_sourceT<b>) => Wonka_types_sourceT<[a, b]>;
export declare const concatMap: <a, b>(f: ((_1: a) => Wonka_types_sourceT<b>)) => Wonka_types_operatorT<a, b>;
export declare const concatAll: <a>(source: Wonka_types_sourceT<Wonka_types_sourceT<a>>) => Wonka_types_sourceT<a>;
export declare const concat: <a>(sources: Wonka_types_sourceT<a>[]) => Wonka_types_sourceT<a>;
export declare const filter: <a>(f: ((_1: a) => boolean)) => Wonka_types_operatorT<a, a>;
export declare const map: <a, b>(f: ((_1: a) => b)) => Wonka_types_operatorT<a, b>;
export declare const mergeMap: <a, b>(f: ((_1: a) => Wonka_types_sourceT<b>)) => Wonka_types_operatorT<a, b>;
export declare const merge: <a>(sources: Wonka_types_sourceT<a>[]) => Wonka_types_sourceT<a>;
export declare const mergeAll: <a>(source: Wonka_types_sourceT<Wonka_types_sourceT<a>>) => Wonka_types_sourceT<a>;
export declare const flatten: <T1>(_1: Wonka_types_sourceT<Wonka_types_sourceT<T1>>) => Wonka_types_sourceT<T1>;
export declare const onEnd: <a>(f: (() => void)) => Wonka_types_operatorT<a, a>;
export declare const onPush: <a>(f: ((_1: a) => void)) => Wonka_types_operatorT<a, a>;
export declare const tap: <T1>(_1: ((_1: T1) => void)) => Wonka_types_operatorT<T1, T1>;
export declare const onStart: <a>(f: (() => void)) => Wonka_types_operatorT<a, a>;
export declare const sample: <a, b>(notifier: Wonka_types_sourceT<a>) => Wonka_types_operatorT<b, b>;
export declare const scan: <a, acc>(f: ((_1: acc, _2: a) => acc), seed: acc) => Wonka_types_operatorT<a, acc>;
export declare const share: <a>(source: Wonka_types_sourceT<a>) => Wonka_types_sourceT<a>;
export declare const skip: <a>(wait: number) => Wonka_types_operatorT<a, a>;
export declare const skipUntil: <a, b>(notifier: Wonka_types_sourceT<a>) => Wonka_types_operatorT<b, b>;
export declare const skipWhile: <a>(f: ((_1: a) => boolean)) => Wonka_types_operatorT<a, a>;
export declare const switchMap: <a, b>(f: ((_1: a) => Wonka_types_sourceT<b>)) => Wonka_types_operatorT<a, b>;
export declare const switchAll: <a>(source: Wonka_types_sourceT<Wonka_types_sourceT<a>>) => Wonka_types_sourceT<a>;
export declare const take: <a>(max: number) => Wonka_types_operatorT<a, a>;
export declare const takeLast: <a>(max: number) => Wonka_types_operatorT<a, a>;
export declare const takeUntil: <a, b>(notifier: Wonka_types_sourceT<a>) => Wonka_types_operatorT<b, b>;
export declare const takeWhile: <a>(f: ((_1: a) => boolean)) => Wonka_types_operatorT<a, a>;
